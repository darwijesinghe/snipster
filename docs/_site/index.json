{
  "api/Snipster.Library.Cache.CacheService.html": {
    "href": "api/Snipster.Library.Cache.CacheService.html",
    "title": "Class CacheService | Snipster",
    "summary": "Class CacheService Namespace Snipster.Library.Cache Assembly Snipster.Library.dll Provides an implementation of ICacheService that handles in-memory caching functionality. public sealed class CacheService : ICacheService Inheritance object CacheService Implements ICacheService Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectValEx.IsDefaultValue<T>(T) ObjectFx.DeepClone<T>(T) JsonEx.ToJson(object, Formatting) ObjectEx.GetPropertyValue(object, string) ObjectEx.SetPropertyValue(object, string, object?) ObjectValEx.HasProperty(object, string) Constructors CacheService(IMemoryCache, ILogger<CacheService>) Initializes a new instance of the CacheService class. public CacheService(IMemoryCache cache, ILogger<CacheService> logger) Parameters cache IMemoryCache The in-memory cache instance. logger ILogger<CacheService> The logger instance for logging cache operations. Exceptions ArgumentNullException Thrown when the logger is null. Methods RemoveCache(string) Removes a specific entry from the cache. public void RemoveCache(string key) Parameters key string The cache key to remove. SetCacheAsync<T>(string, double, Func<Task<T>>) Retrieves data from the cache or loads it using the provided function if not cached. public Task<T?> SetCacheAsync<T>(string key, double duration, Func<Task<T>> create) where T : class Parameters key string The cache key. duration double Cache duration in minutes. create Func<Task<T>> An asynchronous function to fetch data if not in cache. Returns Task<T> The cached or newly fetched data; null on failure. Type Parameters T The type of data to cache. SetCacheAsync<T>(string, Func<Task<T>>) Retrieves data from the cache or loads it using the provided function if not cached. Data is cached for 5 minutes. public Task<T?> SetCacheAsync<T>(string key, Func<Task<T>> create) where T : class Parameters key string The cache key. create Func<Task<T>> An asynchronous function to fetch data if not in cache. Returns Task<T> The cached or newly fetched data; null on failure. Type Parameters T The type of data to cache. SetLongCacheAsync<T>(string, Func<Task<T>>) Retrieves data from the cache or loads it using the provided function if not cached. Data is cached for 60 minutes. public Task<T?> SetLongCacheAsync<T>(string key, Func<Task<T>> create) where T : class Parameters key string The cache key. create Func<Task<T>> An asynchronous function to fetch data if not in cache. Returns Task<T> The cached or newly fetched data; null on failure. Type Parameters T The type of data to cache."
  },
  "api/Snipster.Library.Cache.ICacheService.html": {
    "href": "api/Snipster.Library.Cache.ICacheService.html",
    "title": "Interface ICacheService | Snipster",
    "summary": "Interface ICacheService Namespace Snipster.Library.Cache Assembly Snipster.Library.dll Defines a contract for a caching service that provides methods to store, retrieve, and manage cached data. public interface ICacheService Extension Methods ObjectValEx.IsDefaultValue<T>(T) ObjectFx.DeepClone<T>(T) JsonEx.ToJson(object, Formatting) ObjectEx.GetPropertyValue(object, string) ObjectEx.SetPropertyValue(object, string, object?) ObjectValEx.HasProperty(object, string) Methods RemoveCache(string) Removes a specific entry from the cache. void RemoveCache(string key) Parameters key string The cache key to remove. SetCacheAsync<T>(string, double, Func<Task<T>>) Retrieves data from the cache or loads it using the provided function if not cached. Task<T?> SetCacheAsync<T>(string key, double duration, Func<Task<T>> create) where T : class Parameters key string The cache key. duration double Cache duration in minutes. create Func<Task<T>> An asynchronous function to fetch data if not in cache. Returns Task<T> The cached or newly fetched data; null on failure. Type Parameters T The type of data to cache. SetCacheAsync<T>(string, Func<Task<T>>) Retrieves data from the cache or loads it using the provided function if not cached. Data is cached for 5 minutes. Task<T?> SetCacheAsync<T>(string key, Func<Task<T>> create) where T : class Parameters key string The cache key. create Func<Task<T>> An asynchronous function to fetch data if not in cache. Returns Task<T> The cached or newly fetched data; null on failure. Type Parameters T The type of data to cache. SetLongCacheAsync<T>(string, Func<Task<T>>) Retrieves data from the cache or loads it using the provided function if not cached. Data is cached for 60 minutes. Task<T?> SetLongCacheAsync<T>(string key, Func<Task<T>> create) where T : class Parameters key string The cache key. create Func<Task<T>> An asynchronous function to fetch data if not in cache. Returns Task<T> The cached or newly fetched data; null on failure. Type Parameters T The type of data to cache."
  },
  "api/Snipster.Library.Cache.html": {
    "href": "api/Snipster.Library.Cache.html",
    "title": "Namespace Snipster.Library.Cache | Snipster",
    "summary": "Namespace Snipster.Library.Cache Classes CacheService Provides an implementation of ICacheService that handles in-memory caching functionality. Interfaces ICacheService Defines a contract for a caching service that provides methods to store, retrieve, and manage cached data."
  },
  "api/Snipster.Library.Enums.ExcelAlignment.html": {
    "href": "api/Snipster.Library.Enums.ExcelAlignment.html",
    "title": "Enum ExcelAlignment | Snipster",
    "summary": "Enum ExcelAlignment Namespace Snipster.Library.Enums Assembly Snipster.Library.dll Specifies the alignment options for Excel cells. public enum ExcelAlignment Extension Methods ObjectValEx.IsDefaultValue<T>(T) ObjectFx.DeepClone<T>(T) StringEx.GetDescription(Enum) JsonEx.ToJson(object, Formatting) ObjectEx.GetPropertyValue(object, string) ObjectEx.SetPropertyValue(object, string, object?) ObjectValEx.HasProperty(object, string) Fields Center = 0 Aligns content to the center of the cell. CenterContinuous = 1 Centers content continuously across the cell. Distributed = 2 Distributes content evenly across the cell. Fill = 3 Fills the cell with content by repeating it as necessary. General = 4 General alignment, which lets Excel decide the best alignment based on the content type. Justify = 5 Justifies the content within the cell, aligning both left and right edges. Left = 6 Aligns content to the left side of the cell. Right = 7 Aligns content to the right side of the cell."
  },
  "api/Snipster.Library.Enums.html": {
    "href": "api/Snipster.Library.Enums.html",
    "title": "Namespace Snipster.Library.Enums | Snipster",
    "summary": "Namespace Snipster.Library.Enums Enums ExcelAlignment Specifies the alignment options for Excel cells."
  },
  "api/Snipster.Library.Extensions.CollectionEx.html": {
    "href": "api/Snipster.Library.Extensions.CollectionEx.html",
    "title": "Class CollectionEx | Snipster",
    "summary": "Class CollectionEx Namespace Snipster.Library.Extensions Assembly Snipster.Library.dll Provides various extensions for working with collections. public static class CollectionEx Inheritance object CollectionEx Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ChunkBy<T>(IEnumerable<T>, int) Splits a collection into chunks of the specified size. public static IEnumerable<IEnumerable<T>> ChunkBy<T>(this IEnumerable<T> source, int size) Parameters source IEnumerable<T> The collection to split. size int The size of each chunk. Returns IEnumerable<IEnumerable<T>> An IEnumerable<T> of chunks, where each chunk is an IEnumerable<T> containing elements from the original collection. Type Parameters T The type of elements in the collection. Exceptions ArgumentNullException Thrown when the source collection is null or size is less than or equal to zero. ExceptSafe<T>(IEnumerable<T>, IEnumerable<T>) Compares two collections and returns elements only in the first. public static IEnumerable<T> ExceptSafe<T>(this IEnumerable<T> source, IEnumerable<T> other) Parameters source IEnumerable<T> The first collection to compare. other IEnumerable<T> The second collection to compare against. Returns IEnumerable<T> An IEnumerable<T> containing elements that are in the first collection but not in the second. Type Parameters T The type of elements in the collections. ForEach<T>(IEnumerable<T>, Action<T>) Executes an action for each element in the collection. public static void ForEach<T>(this IEnumerable<T> source, Action<T> action) Parameters source IEnumerable<T> The collection to iterate over. action Action<T> The action to execute for each element. Type Parameters T The type of elements in the collection. Exceptions ArgumentNullException Thrown when the source or action is null. LeastCommon<T>(IEnumerable<T>) Returns the least frequent item in the collection. public static T LeastCommon<T>(this IEnumerable<T> source) Parameters source IEnumerable<T> The collection to analyze. Returns T The least common item in the collection. Type Parameters T The type of elements in the collection. Exceptions ArgumentNullException Thrown when the source is null. InvalidOperationException Thrown when the source contains no elements. MostCommon<T>(IEnumerable<T>) Returns the most frequent item in the collection. public static T MostCommon<T>(this IEnumerable<T> source) Parameters source IEnumerable<T> The collection to analyze. Returns T The most common item in the collection. Type Parameters T The type of elements in the collection. Exceptions ArgumentNullException Thrown when the source is null. InvalidOperationException Thrown when the source contains no elements. RandomItem<T>(IEnumerable<T>) Returns a random element from a collection. public static T RandomItem<T>(this IEnumerable<T> source) Parameters source IEnumerable<T> The collection to select from. Returns T A random element from the collection. Type Parameters T The type of elements in the collection. Exceptions ArgumentNullException Thrown when the source is null. Shuffle<T>(IEnumerable<T>) Shuffles the collection randomly. public static IEnumerable<T> Shuffle<T>(this IEnumerable<T> source) Parameters source IEnumerable<T> The collection to shuffle. Returns IEnumerable<T> An IEnumerable<T> containing the elements of the original collection in random order. Type Parameters T The type of elements in the collection. ToSafeDictionary<TSource, TKey, TValue>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TValue>) Returns a dictionary from a list safely (skips duplicate keys). public static Dictionary<TKey, TValue> ToSafeDictionary<TSource, TKey, TValue>(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TValue> valueSelector) where TKey : notnull Parameters source IEnumerable<TSource> The collection to convert. keySelector Func<TSource, TKey> A function to extract the key from each element. valueSelector Func<TSource, TValue> A function to extract the value from each element. Returns Dictionary<TKey, TValue> A Dictionary<TKey, TValue> containing elements from the collection, where duplicate keys are skipped. Type Parameters TSource The type of elements in the source collection. TKey The type of the key used for the dictionary. TValue The type of the value used for the dictionary. Exceptions ArgumentNullException Thrown when the source, keySelector, or valueSelector is null."
  },
  "api/Snipster.Library.Extensions.CreditCardEx.html": {
    "href": "api/Snipster.Library.Extensions.CreditCardEx.html",
    "title": "Class CreditCardEx | Snipster",
    "summary": "Class CreditCardEx Namespace Snipster.Library.Extensions Assembly Snipster.Library.dll Provides various extensions for working with credit card information. public static class CreditCardEx Inheritance object CreditCardEx Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetCreditCardType(string) Determines the type of credit card based on its number. Supports various card types such as Visa, MasterCard, American Express, Discover, JCB, and Diners Club. public static string GetCreditCardType(this string number) Parameters number string The credit card number as a string. Returns string A string representing the type of credit card (e.g., \"Visa\", \"MasterCard\", etc.). \"Unknown\" if the type cannot be determined or if the input is invalid, empty or non-numeric input."
  },
  "api/Snipster.Library.Extensions.DateTimeEx.html": {
    "href": "api/Snipster.Library.Extensions.DateTimeEx.html",
    "title": "Class DateTimeEx | Snipster",
    "summary": "Class DateTimeEx Namespace Snipster.Library.Extensions Assembly Snipster.Library.dll Provides various extensions for working with DateTime objects. public static class DateTimeEx Inheritance object DateTimeEx Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods EndOfDay(DateTime) Converts DateTime to the end of the day (23:59:59.999). public static DateTime EndOfDay(this DateTime date) Parameters date DateTime The date to convert. Returns DateTime A DateTime representing the end of the day (23:59:59.999) for the given date. FromTimeZone(DateTime, string) Converts a date from a specific time zone to UTC. public static DateTime FromTimeZone(this DateTime date, string timeZoneId) Parameters date DateTime The local date in the specified time zone. timeZoneId string The IANA or Windows time zone ID (e.g. \"Pacific Standard Time\"). Returns DateTime A DateTime representing the UTC time equivalent of the given local date. Exceptions ArgumentException Thrown when timeZoneId is null, empty, not found, or invalid. FromUnixTimestamp(long) Converts a Unix timestamp to DateTime (UTC). e.g. 1609459200 to 2021-01-01T00:00:00Z. public static DateTime FromUnixTimestamp(this long timestamp) Parameters timestamp long The Unix timestamp to convert. Returns DateTime The DateTime representing the Unix timestamp in UTC. GetWeekEndDate(DateTime) Returns the end of the week (Sunday) for the specified DateTime. public static DateTime GetWeekEndDate(this DateTime date) Parameters date DateTime The date to find the end of the week for. Returns DateTime A DateTime representing the Sunday of that week. GetWeekOfYear(DateTime) Gets the week number of the year (ISO 8601). e.g. 1 for the first week of the year. public static int GetWeekOfYear(this DateTime date) Parameters date DateTime The date to get the week number for. Returns int The week number of the year (1-53) for the given date. GetWeekStartDate(DateTime) Returns the start of the week (Monday) for the specified DateTime. public static DateTime GetWeekStartDate(this DateTime date) Parameters date DateTime The date to find the start of the week for. Returns DateTime A DateTime representing the Monday of that week. StartOfDay(DateTime) Converts DateTime to the start of the day (00:00:00). public static DateTime StartOfDay(this DateTime date) Parameters date DateTime The date to convert. Returns DateTime A DateTime representing the start of the day (00:00:00) for the given date. ToAge(DateTime) Returns the age based on date of birth. e.g. if born on 1990-01-01 and today is 2023-10-01, returns 33. public static int ToAge(this DateTime birthDate) Parameters birthDate DateTime The date of birth to calculate the age from. Returns int The age in years based on the date of birth. ToDateString(DateTime) Formats date as \"yyyy-MM-dd\". public static string ToDateString(this DateTime date) Parameters date DateTime The date to format. Returns string A string representing the date in \"yyyy-MM-dd\" format. ToFullDateTimeString(DateTime) Formats as \"yyyy-MM-dd HH:mm:ss\". public static string ToFullDateTimeString(this DateTime date) Parameters date DateTime The date to format. Returns string A string representing the date and time in \"yyyy-MM-dd HH:mm:ss\" format. ToTimeAgo(DateTime) Returns a human-readable \"time ago\" string (e.g. \"3 hours ago\"). public static string ToTimeAgo(this DateTime date) Parameters date DateTime The date to convert to a \"time ago\" string. Returns string A string representing how long ago the date was from now (e.g. \"3 hours ago\"). If the date is DateTime.MinValue or DateTime.MaxValue, returns \"never\". If the date is in the future, returns \"in the future\"; otherwise, returns empty string. ToTimeString(DateTime) Formats time as \"HH:mm:ss\". public static string ToTimeString(this DateTime date) Parameters date DateTime The date to format. Returns string A string representing the time in \"HH:mm:ss\" format. ToTimeZone(DateTime, string) Converts the specified DateTime to the specified time zone. public static DateTime ToTimeZone(this DateTime date, string timeZoneId) Parameters date DateTime The date to convert. Can be local or UTC. timeZoneId string The IANA or Windows time zone ID (e.g. \"Pacific Standard Time\"). Returns DateTime A DateTime representing the time in the specified time zone. Exceptions ArgumentException Thrown when timeZoneId is null, empty, not found, or invalid. ToUnixTimestamp(DateTime) Converts a DateTime to a Unix timestamp (seconds since Unix epoch: 1970-01-01T00:00:00Z). public static long ToUnixTimestamp(this DateTime date) Parameters date DateTime The DateTime to convert. Treated as local or UTC depending on its Kind. Returns long A long representing the Unix timestamp."
  },
  "api/Snipster.Library.Extensions.JsonEx.html": {
    "href": "api/Snipster.Library.Extensions.JsonEx.html",
    "title": "Class JsonEx | Snipster",
    "summary": "Class JsonEx Namespace Snipster.Library.Extensions Assembly Snipster.Library.dll Provides various extensions for working with JSON data. public static class JsonEx Inheritance object JsonEx Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods FromJson<T>(string) De-serializes a JSON string to an object of type T. public static T? FromJson<T>(this string json) Parameters json string The JSON string to de-serialize. Returns T An object of type T if the JSON is valid; otherwise, returns default(T). Type Parameters T The type of the object to de-serialize to. ToJson(object, Formatting) Serializes the specified object to a JSON string. public static string ToJson(this object obj, Formatting formatting = Formatting.None) Parameters obj object The object to serialize. formatting Formatting Optional formatting for the JSON output (None or Indented). Default is None. Returns string A JSON-formatted string representation of the object; otherwise, returns an empty string if the object is null."
  },
  "api/Snipster.Library.Extensions.NumberEx.html": {
    "href": "api/Snipster.Library.Extensions.NumberEx.html",
    "title": "Class NumberEx | Snipster",
    "summary": "Class NumberEx Namespace Snipster.Library.Extensions Assembly Snipster.Library.dll Provides various extensions for working with numbers. public static class NumberEx Inheritance object NumberEx Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ToDoubleSafe(string, double) Converts string to a double safely, returns default if invalid. e.g. \"123.45\" becomes 123.45, \"abc\" becomes 0. public static double ToDoubleSafe(this string input, double defaultValue = 0) Parameters input string The input string to convert. defaultValue double The default value to return if the conversion fails (default is 0). Returns double A double representation of the string if valid; otherwise, the specified default value (default is 0). ToIntSafe(string, int) Converts string to an integer safely, returns default if invalid. e.g. \"123\" becomes 123, \"abc\" becomes 0. public static int ToIntSafe(this string input, int defaultValue = 0) Parameters input string The input string to convert. defaultValue int The default value to return if the conversion fails (default is 0). Returns int An integer representation of the string if valid; otherwise, the specified default value (default is 0). ToOrdinal(int) Converts a number to its ordinal representation as a string. e.g. \"1st\", \"2nd\", \"3rd\", \"4th\", etc. public static string ToOrdinal(this int number) Parameters number int The number to convert. Returns string A string representing the ordinal form of the number."
  },
  "api/Snipster.Library.Extensions.ObjectEx.html": {
    "href": "api/Snipster.Library.Extensions.ObjectEx.html",
    "title": "Class ObjectEx | Snipster",
    "summary": "Class ObjectEx Namespace Snipster.Library.Extensions Assembly Snipster.Library.dll Provides various extensions for working with objects. public static class ObjectEx Inheritance object ObjectEx Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetPropertyValue(object, string) Gets the value of a public instance property by name. public static object? GetPropertyValue(this object obj, string propertyName) Parameters obj object The object to retrieve the property value from. propertyName string The name of the property. Returns object The value of the property if found; otherwise, null. Exceptions ArgumentNullException Thrown when the object is null. ArgumentException Thrown when the property name is null or empty. InvalidOperationException Thrown when the property is not found or failed to get the value. SetPropertyValue(object, string, object?) Sets the value of a public instance property by name, if it exists and is writable. public static void SetPropertyValue(this object obj, string propertyName, object? value) Parameters obj object The object to retrieve the property value from. propertyName string The name of the property. value object The value to set. Exceptions ArgumentNullException Thrown when the object is null. ArgumentException Thrown when the property name is null or empty. InvalidOperationException Thrown when the property is not found or is read-only. InvalidCastException Thrown when the value cannot be converted to the property's type."
  },
  "api/Snipster.Library.Extensions.SecurityEx.html": {
    "href": "api/Snipster.Library.Extensions.SecurityEx.html",
    "title": "Class SecurityEx | Snipster",
    "summary": "Class SecurityEx Namespace Snipster.Library.Extensions Assembly Snipster.Library.dll Provides various extensions for working with security-related operations. public static class SecurityEx Inheritance object SecurityEx Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ToSha256(string) Generates a SHA256 hash from a string. Useful for creating unique identifiers or checksums. public static string ToSha256(this string input) Parameters input string The input string to hash. Returns string A SHA256 hash of the input string, represented as a hexadecimal string; otherwise, returns the original string if it is null or empty."
  },
  "api/Snipster.Library.Extensions.StringEx.html": {
    "href": "api/Snipster.Library.Extensions.StringEx.html",
    "title": "Class StringEx | Snipster",
    "summary": "Class StringEx Namespace Snipster.Library.Extensions Assembly Snipster.Library.dll Provides various string manipulation and formatting extension methods. public static class StringEx Inheritance object StringEx Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CapitalizeFirst(string) Capitalizes the first character of the string, leaving the rest unchanged. public static string CapitalizeFirst(this string input) Parameters input string The input string to modify. Returns string A string with the first character converted to uppercase; otherwise, returns the original string if it is null or empty. FromBase64(string) Decodes a Base64-encoded string. public static string FromBase64(this string base64) Parameters base64 string The Base64-encoded string to decode. Returns string A decoded string from the Base64 input; otherwise, returns the original string if it is null or empty. GetDescription(Enum) Retrieves the value of the DescriptionAttribute applied to an enum value. If no description is found, it returns the enum's name as a fallback. public static string GetDescription(this Enum value) Parameters value Enum The Enum value. Returns string The description string or enum name if no description is present. NormalizeSpaces(string) Normalizes spaces — trims and replaces multiple spaces with a single space. e.g. \" Hello World \" becomes \"Hello World\". public static string NormalizeSpaces(this string input) Parameters input string The input string to normalize. Returns string A string with leading/trailing spaces removed and multiple spaces replaced by a single space; otherwise, returns the original string if it is null or empty. OnlyDigits(string) Removes all non-numeric characters. public static string OnlyDigits(this string input) Parameters input string The input string to filter. Returns string A string containing only the numeric characters from the input; otherwise, returns the original string if it is null or empty. OrDefault(string?, string) Returns a default value if string is null or empty. public static string? OrDefault(this string? input, string defaultValue) Parameters input string The input string to check. defaultValue string The default value to return if the input is null or empty. Returns string The original string if it is not null or empty; otherwise, the specified default value. RemoveSpecialCharacters(string) Removes all special characters except spaces. public static string RemoveSpecialCharacters(this string input) Parameters input string The input string to sanitize. Returns string A string containing only alphanumeric characters and spaces from the input; otherwise, returns the original string if it is null or empty. RemoveWhitespace(string) Removes all whitespace (spaces, tabs, newlines) from the string. public static string RemoveWhitespace(this string input) Parameters input string The input string to process. Returns string A string with all whitespace characters removed; otherwise, returns the original string if it is null or empty. SanitizeAlphanumeric(string) Removes all non-alphanumeric characters (letters and digits). public static string SanitizeAlphanumeric(this string input) Parameters input string The input string to sanitize. Returns string A string containing only alphanumeric characters from the input; otherwise, returns the original string if it is null or empty. Slugify(string) Slugifies a string (e.g. \"Hello World!\" => \"hello-world\"). public static string Slugify(this string input) Parameters input string The input string to slugify. Returns string A slugified version of the input string, suitable for use in URLs; otherwise, returns the original string if it is null or empty. StripHtmlTags(string) Removes HTML tags from the string. public static string StripHtmlTags(this string input) Parameters input string The input string containing HTML tags. Returns string A string with all HTML tags removed; otherwise, returns the original string if it is null or empty. ToBase64(string) Converts a string to Base64. public static string ToBase64(this string input) Parameters input string The input string to encode. Returns string A Base64-encoded string representation of the input; otherwise, returns the original string if it is null or empty. ToCamelCase(string) Converts a string to CamelCase format. e.g. \"hello world\" becomes \"helloWorld\". public static string ToCamelCase(this string input) Parameters input string The input string to convert. Returns string A CamelCase version of the input string, where the first letter is lowercase and subsequent words are capitalized; otherwise, returns the original string if it is null or empty. ToCleanQueryString(string) Cleans a SQL query string by removing any zero-width characters and BOM. public static string ToCleanQueryString(this string sql) Parameters sql string The SQL query string to clean. Returns string A cleaned SQL query string with zero-width characters and BOM removed; otherwise, returns the original string if it is null or empty. ToKebabCase(string) Converts a string to kebab-case. e.g. \"Hello World\" becomes \"hello-world\". public static string ToKebabCase(this string input) Parameters input string The input string to convert. Returns string A kebab-case version of the input string, where words are lowercase and separated by hyphens; otherwise, returns the original string if it is null or empty. ToPascalCase(string) Converts a string to PascalCase. e.g. \"hello world\" becomes \"HelloWorld\". public static string ToPascalCase(this string input) Parameters input string The input string to convert. Returns string A PascalCase version of the input string, where the first letter of each word is capitalized and spaces are removed; otherwise, returns the original string if it is null or empty. ToTitleCase(string) Converts string to Title Case. public static string ToTitleCase(this string input) Parameters input string The input string to convert. Returns string A string converted to Title Case, where the first letter of each word is capitalized; otherwise, returns the original string if it is null or empty. Truncate(string, int, string) Truncates the string to a specified maximum length and optionally appends a suffix (e.g. \"...\"). public static string Truncate(this string input, int maxLength, string suffix = \"...\") Parameters input string The original string to truncate. maxLength int The maximum number of characters to retain from the input string. suffix string The optional suffix to append if the string is truncated. Defaults to \"...\". If null is provided, no suffix will be appended. Returns string A truncated version of the input string if it exceeds the specified maximum length; otherwise, returns the original string if it is null, empty, or does not exceed the maximum length."
  },
  "api/Snipster.Library.Extensions.Validations.CollectionValEx.html": {
    "href": "api/Snipster.Library.Extensions.Validations.CollectionValEx.html",
    "title": "Class CollectionValEx | Snipster",
    "summary": "Class CollectionValEx Namespace Snipster.Library.Extensions.Validations Assembly Snipster.Library.dll Provides various extensions for validating collections. public static class CollectionValEx Inheritance object CollectionValEx Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods HasDuplicates<T>(IEnumerable<T>) Returns true if the collection contains any duplicates. public static bool HasDuplicates<T>(this IEnumerable<T> source) Parameters source IEnumerable<T> The collection to check for duplicates. Returns bool True if the collection contains duplicates; otherwise, false. Type Parameters T The type of elements in the collection. IsNullOrEmpty<T>(IEnumerable<T>) Returns true if the collection is null or has no elements. public static bool IsNullOrEmpty<T>(this IEnumerable<T> source) Parameters source IEnumerable<T> The collection to check. Returns bool True if the collection is null or has no elements; otherwise, false. Type Parameters T The type of elements in the collection."
  },
  "api/Snipster.Library.Extensions.Validations.CreditCardValEx.html": {
    "href": "api/Snipster.Library.Extensions.Validations.CreditCardValEx.html",
    "title": "Class CreditCardValEx | Snipster",
    "summary": "Class CreditCardValEx Namespace Snipster.Library.Extensions.Validations Assembly Snipster.Library.dll Provides various extensions for validating credit card information. public static class CreditCardValEx Inheritance object CreditCardValEx Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods IsValidCreditCard(string) Validates if a given string is a valid credit card number using Luhn algorithm. public static bool IsValidCreditCard(this string input) Parameters input string The credit card number as a string. Returns bool True if the string is a valid credit card number; otherwise, false."
  },
  "api/Snipster.Library.Extensions.Validations.DateTimeValEx.html": {
    "href": "api/Snipster.Library.Extensions.Validations.DateTimeValEx.html",
    "title": "Class DateTimeValEx | Snipster",
    "summary": "Class DateTimeValEx Namespace Snipster.Library.Extensions.Validations Assembly Snipster.Library.dll Provides various extensions for validating DateTime values. public static class DateTimeValEx Inheritance object DateTimeValEx Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods IsFuture(DateTime) Returns true if the date is in the future. public static bool IsFuture(this DateTime date) Parameters date DateTime The date to check. Returns bool True if the date is in the future; otherwise, false. IsPast(DateTime) Returns true if the date is in the past. public static bool IsPast(this DateTime date) Parameters date DateTime The date to check. Returns bool True if the date is in the past; otherwise, false. IsToday(DateTime) Returns true if the date is today. public static bool IsToday(this DateTime date) Parameters date DateTime The date to check. Returns bool True if the date is today; otherwise, false. IsValidDate(string, string) Validates if a given string is a valid date in a specific format. public static bool IsValidDate(this string input, string format = \"yyyy-MM-dd\") Parameters input string The input string to validate. format string The date format to validate against (default is \"yyyy-MM-dd\"). Returns bool True if the string is a valid date in the specified format; otherwise, false. IsWeekday(DateTime) Returns true if the date is a weekday (Monday–Friday). public static bool IsWeekday(this DateTime date) Parameters date DateTime The date to check. Returns bool True if the date is a weekday; otherwise, false. IsWeekend(DateTime) Returns true if the date is a weekend (Saturday or Sunday). public static bool IsWeekend(this DateTime date) Parameters date DateTime The date to check. Returns bool True if the date is a weekend; otherwise, false."
  },
  "api/Snipster.Library.Extensions.Validations.JsonValEx.html": {
    "href": "api/Snipster.Library.Extensions.Validations.JsonValEx.html",
    "title": "Class JsonValEx | Snipster",
    "summary": "Class JsonValEx Namespace Snipster.Library.Extensions.Validations Assembly Snipster.Library.dll Provides various extensions for validating JSON values. public static class JsonValEx Inheritance object JsonValEx Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods IsValidJson(string) Validates if a string is a valid JSON format. public static bool IsValidJson(this string json) Parameters json string The JSON string to validate. Returns bool True if the string is a valid JSON; otherwise, false."
  },
  "api/Snipster.Library.Extensions.Validations.NetworkValEx.html": {
    "href": "api/Snipster.Library.Extensions.Validations.NetworkValEx.html",
    "title": "Class NetworkValEx | Snipster",
    "summary": "Class NetworkValEx Namespace Snipster.Library.Extensions.Validations Assembly Snipster.Library.dll Provides various extensions for validating network-related values. public static class NetworkValEx Inheritance object NetworkValEx Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods IsValidIPv4(string) Validates if a given string is a valid IPv4 address. public static bool IsValidIPv4(this string input) Parameters input string The input string to validate. Returns bool True if the string is a valid IPv4 address; otherwise, false. IsValidIPv6(string) Validates if a given string is a valid IPv6 address. public static bool IsValidIPv6(this string input) Parameters input string The input string to validate. Returns bool True if the string is a valid IPv6 address; otherwise, false. IsValidWebAddress(string) Validates if a given string is a valid web address (HTTP or HTTPS). public static bool IsValidWebAddress(this string input) Parameters input string The input string to validate. Returns bool True if the string is a valid web address (HTTP or HTTPS); otherwise, false."
  },
  "api/Snipster.Library.Extensions.Validations.ObjectValEx.html": {
    "href": "api/Snipster.Library.Extensions.Validations.ObjectValEx.html",
    "title": "Class ObjectValEx | Snipster",
    "summary": "Class ObjectValEx Namespace Snipster.Library.Extensions.Validations Assembly Snipster.Library.dll Provides various extensions for validating objects. public static class ObjectValEx Inheritance object ObjectValEx Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods HasProperty(object, string) Checks whether the given object has a property with the specified name. public static bool HasProperty(this object obj, string propertyName) Parameters obj object The object to check. propertyName string The name of the property to look for. Returns bool True if the object has a property with the specified name; otherwise, false. Exceptions ArgumentNullException Thrown when the object is null. ArgumentException Thrown when the property name is null or empty. IsDefaultValue<T>(T) Determines whether the specified object is equal to its type's default value. public static bool IsDefaultValue<T>(this T obj) Parameters obj T The object to check. Returns bool True if the object is equal to its type's default value; otherwise, false. Type Parameters T"
  },
  "api/Snipster.Library.Extensions.Validations.SecurityValEx.html": {
    "href": "api/Snipster.Library.Extensions.Validations.SecurityValEx.html",
    "title": "Class SecurityValEx | Snipster",
    "summary": "Class SecurityValEx Namespace Snipster.Library.Extensions.Validations Assembly Snipster.Library.dll Provides various extensions for validating security-related values. public static class SecurityValEx Inheritance object SecurityValEx Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods IsStrongPassword(string, int) Validates if a password meets basic rules (length, upper, lower, number, special). public static bool IsStrongPassword(this string input, int minLength = 8) Parameters input string The input string to validate. minLength int The minimum length for the password. Returns bool True if the password is strong; otherwise, false. IsValidEmail(string) Validates string type email address. public static bool IsValidEmail(this string email) Parameters email string The input email address that needs to be validated. Returns bool True if the email address is valid; otherwise false."
  },
  "api/Snipster.Library.Extensions.Validations.StringValEx.html": {
    "href": "api/Snipster.Library.Extensions.Validations.StringValEx.html",
    "title": "Class StringValEx | Snipster",
    "summary": "Class StringValEx Namespace Snipster.Library.Extensions.Validations Assembly Snipster.Library.dll Provides various extensions for validating strings. public static class StringValEx Inheritance object StringValEx Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods IsAlphabetic(string) Validates that a string contains only letters (no digits or symbols). public static bool IsAlphabetic(this string input) Parameters input string The input string to validate. Returns bool True if the string contains only letters; otherwise, false. IsAlphanumeric(string) Validates that a string contains only letters or numbers. public static bool IsAlphanumeric(this string input) Parameters input string The input string to validate. Returns bool True if the string contains only letters or numbers; otherwise, false. IsContainsIgnoreCase(string, string) Checks if the string contains another string with case-insensitive comparison. public static bool IsContainsIgnoreCase(this string source, string toCheck) Parameters source string The source string to search within. toCheck string The string to check for within the source string. Returns bool True if the source string contains the specified string, ignoring case; otherwise, false. IsNumeric(string) Validates that a string contains only digits. public static bool IsNumeric(this string input) Parameters input string The input string to validate. Returns bool True if the string contains only digits; otherwise, false. IsValidInternationalPhone(string) Checks if the string is a valid international phone number (starts with + and contains 10–15 digits). public static bool IsValidInternationalPhone(this string input) Parameters input string The input string to validate. Returns bool True if the string is a valid international phone number; otherwise, false. IsValidSriLankanPhone(string) Validates whether the string is a valid Sri Lankan phone number (starting with 07, 10 digits). public static bool IsValidSriLankanPhone(this string input) Parameters input string The input string to validate. Returns bool True if the string is a valid Sri Lankan phone number; otherwise, false."
  },
  "api/Snipster.Library.Extensions.Validations.html": {
    "href": "api/Snipster.Library.Extensions.Validations.html",
    "title": "Namespace Snipster.Library.Extensions.Validations | Snipster",
    "summary": "Namespace Snipster.Library.Extensions.Validations Classes CollectionValEx Provides various extensions for validating collections. CreditCardValEx Provides various extensions for validating credit card information. DateTimeValEx Provides various extensions for validating DateTime values. JsonValEx Provides various extensions for validating JSON values. NetworkValEx Provides various extensions for validating network-related values. ObjectValEx Provides various extensions for validating objects. SecurityValEx Provides various extensions for validating security-related values. StringValEx Provides various extensions for validating strings."
  },
  "api/Snipster.Library.Extensions.html": {
    "href": "api/Snipster.Library.Extensions.html",
    "title": "Namespace Snipster.Library.Extensions | Snipster",
    "summary": "Namespace Snipster.Library.Extensions Classes CollectionEx Provides various extensions for working with collections. CreditCardEx Provides various extensions for working with credit card information. DateTimeEx Provides various extensions for working with DateTime objects. JsonEx Provides various extensions for working with JSON data. NumberEx Provides various extensions for working with numbers. ObjectEx Provides various extensions for working with objects. SecurityEx Provides various extensions for working with security-related operations. StringEx Provides various string manipulation and formatting extension methods."
  },
  "api/Snipster.Library.Helpers.ExcelFx.html": {
    "href": "api/Snipster.Library.Helpers.ExcelFx.html",
    "title": "Class ExcelFx | Snipster",
    "summary": "Class ExcelFx Namespace Snipster.Library.Helpers Assembly Snipster.Library.dll A class that provides Excel files related utility functions. public static class ExcelFx Inheritance object ExcelFx Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods WriteToExcel<T>(IEnumerable<T>, List<ExcelColumn>, string, string, Action<ExcelExportOptions>?) Exports a collection of data to an Excel file written to the provided memory stream, using the specified column definitions and export options. public static void WriteToExcel<T>(IEnumerable<T> data, List<ExcelColumn> columns, string filePath, string fileName, Action<ExcelExportOptions>? configureOptions = null) Parameters data IEnumerable<T> The collection of data to export. columns List<ExcelColumn> The list of column definitions specifying how to map and format the data. filePath string The file path where the Excel file will be saved. fileName string The name of the Excel file to create (e.g., \"output.xlsx\"). configureOptions Action<ExcelExportOptions> An optional action to configure additional export options. Type Parameters T Exceptions ArgumentException Thrown if the file path or file name is null or empty. DirectoryNotFoundException Thrown if the specified directory does not exist. WriteToMemory<T>(IEnumerable<T>, List<ExcelColumn>, MemoryStream, Action<ExcelExportOptions>?) Exports a collection of data to an Excel file written to the provided memory stream, using the specified column definitions and export options. public static void WriteToMemory<T>(IEnumerable<T> data, List<ExcelColumn> columns, MemoryStream stream, Action<ExcelExportOptions>? configureOptions = null) Parameters data IEnumerable<T> The collection of data to export. columns List<ExcelColumn> The list of column definitions specifying how to map and format the data. stream MemoryStream The memory stream to which the Excel file will be written. configureOptions Action<ExcelExportOptions> An optional action to configure additional export options. Type Parameters T Exceptions ArgumentException Thrown if the columns list is null or empty, if the data collection is null or empty, or if a column definition cannot be matched to a property or if there is a type mismatch in the data. ArgumentNullException Thrown if the provided memory stream is null."
  },
  "api/Snipster.Library.Helpers.FileFx.html": {
    "href": "api/Snipster.Library.Helpers.FileFx.html",
    "title": "Class FileFx | Snipster",
    "summary": "Class FileFx Namespace Snipster.Library.Helpers Assembly Snipster.Library.dll A class that provides file-related utility functions. public class FileFx Inheritance object FileFx Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectValEx.IsDefaultValue<T>(T) ObjectFx.DeepClone<T>(T) JsonEx.ToJson(object, Formatting) ObjectEx.GetPropertyValue(object, string) ObjectEx.SetPropertyValue(object, string, object?) ObjectValEx.HasProperty(object, string) Methods CreateTempFile(string) Creates a temporary file with a unique name in the system's temporary directory. public static string? CreateTempFile(string extension = \".tmp\") Parameters extension string The file extension for the temporary file. Defaults to \".tmp\". Returns string The path to the created temporary file, or null if an error occurs. GetDirectorySize(string) Calculates the total size of a directory, including all its subdirectories and files. public static long GetDirectorySize(string path) Parameters path string The path to the directory. Returns long The total size of the directory in bytes, or 0 if the directory does not exist or an error occurs. SafeReadBytes(string) Safely reads the content of a binary file as a byte array. public static byte[]? SafeReadBytes(string path) Parameters path string The path to the file. Returns byte[] The content of the file as a byte array, or null if an error occurs. SafeReadText(string, Encoding?) Safely reads the content of a text file. public static string? SafeReadText(string path, Encoding? encoding = null) Parameters path string The path to the file. encoding Encoding The encoding to use for reading the file. Defaults to UTF8. Returns string The content of the file as a string, or null if an error occurs. SafeWriteBytes(string, byte[]) Safely writes a byte array to a file, creating the file if it does not exist or overwriting it if it does. public static bool SafeWriteBytes(string path, byte[] data) Parameters path string The path to the file. data byte[] The byte array to write to the file. Returns bool True if the write operation was successful; otherwise, false. SafeWriteText(string, string, Encoding?) Safely writes text content to a file, creating the file if it does not exist or overwriting it if it does. public static bool SafeWriteText(string path, string content, Encoding? encoding = null) Parameters path string The path to the file. content string The content to write to the file. encoding Encoding The encoding to use for writing the file. Defaults to UTF8. Returns bool True if the write operation was successful; otherwise, false. SanitizeFileName(string, string) Sanitizes a file name by replacing all invalid file name characters with a specified replacement string (default is underscore). public static string? SanitizeFileName(string fileName, string replacement = \"_\") Parameters fileName string The original file name to sanitize. replacement string The string used to replace invalid characters. Defaults to \"_\". Returns string A sanitized file name where invalid characters are replaced, or null if an error occurs."
  },
  "api/Snipster.Library.Helpers.JsonFx.html": {
    "href": "api/Snipster.Library.Helpers.JsonFx.html",
    "title": "Class JsonFx | Snipster",
    "summary": "Class JsonFx Namespace Snipster.Library.Helpers Assembly Snipster.Library.dll Provides methods for manipulating JSON strings. public static class JsonFx Inheritance object JsonFx Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Minify(string) Minifies a JSON string (removes all whitespace and newlines) public static string Minify(string json) Parameters json string The JSON string to minify. Returns string A minified JSON string; if the input is invalid, returns the original string. Prettify(string) Prettifies a JSON string (adds indentation and newlines for readability) public static string Prettify(string json) Parameters json string The JSON string to prettify. Returns string A prettified JSON string; if the input is invalid, returns the original string."
  },
  "api/Snipster.Library.Helpers.NetworkFx.html": {
    "href": "api/Snipster.Library.Helpers.NetworkFx.html",
    "title": "Class NetworkFx | Snipster",
    "summary": "Class NetworkFx Namespace Snipster.Library.Helpers Assembly Snipster.Library.dll A class that provides network-related functionality. public static class NetworkFx Inheritance object NetworkFx Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods BuildUrl(string, Dictionary<string, object?>) Builds a URL with query parameters from a base URL and a dictionary of parameters. Supports both single values and collections as parameter values. public static string BuildUrl(string baseUrl, Dictionary<string, object?> parameters) Parameters baseUrl string The base URL to which the parameters will be added. parameters Dictionary<string, object> A dictionary containing the query parameters to be added to the URL. Returns string A string representing the complete URL with the query parameters appended. Exceptions ArgumentException Thrown when the base URL is null or empty. ArgumentNullException Thrown when the parameters dictionary is null. HasInternetConnectionAsync(string, int) Checks if the system has an active internet connection by sending a lightweight request to a reliable host (default: https://www.google.com). public static Task<bool> HasInternetConnectionAsync(string testUrl = \"http://www.google.com\", int timeoutSeconds = 5) Parameters testUrl string Optional test URL (default: https://www.google.com) timeoutSeconds int Timeout in seconds (default: 5) Returns Task<bool> True if internet connection is available; otherwise false. IsHostAvailableAsync(string, int) Checks if a host is available by sending a ping request. public static Task<bool> IsHostAvailableAsync(string host, int timeout = 1000) Parameters host string The host to check. timeout int The timeout in milliseconds for the ping request. Defaults to 1000 milliseconds (1 second). Returns Task<bool> True if the host is available, otherwise false. Exceptions ArgumentException Thrown when the host is null or empty. ArgumentOutOfRangeException Thrown when the timeout is less than or equal to zero."
  },
  "api/Snipster.Library.Helpers.ObjectFx.html": {
    "href": "api/Snipster.Library.Helpers.ObjectFx.html",
    "title": "Class ObjectFx | Snipster",
    "summary": "Class ObjectFx Namespace Snipster.Library.Helpers Assembly Snipster.Library.dll A class that provides object-related utility functions. public static class ObjectFx Inheritance object ObjectFx Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods DeepClone<T>(T) Creates a deep clone of the specified object using json serialization. public static T DeepClone<T>(this T obj) Parameters obj T The source object to clone. Returns T A deep cloned copy of the source object. Type Parameters T The object type to clone. Exceptions ArgumentNullException Thrown if the source object is null. InvalidOperationException Thrown if a serialization or reference loop issue occurs or any unexpected error during cloning."
  },
  "api/Snipster.Library.Helpers.SecurityFx.html": {
    "href": "api/Snipster.Library.Helpers.SecurityFx.html",
    "title": "Class SecurityFx | Snipster",
    "summary": "Class SecurityFx Namespace Snipster.Library.Helpers Assembly Snipster.Library.dll Provides various security-related helper methods and functionalities. public static class SecurityFx Inheritance object SecurityFx Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GenerateSecureToken(int) Generates a secure random token of specified length using cryptographic random number generation. public static string GenerateSecureToken(int length = 32) Parameters length int The length of the token to generate. Default is 32 characters. Returns string A secure random token as a Base64 string, with URL-safe characters and trimmed to the specified length. PasswordHash(string, out byte[], out byte[]) Generates a hashed password and salt using HMACSHA256. public static void PasswordHash(string password, out byte[] passwordHash, out byte[] passwordSalt) Parameters password string The plain text password to hash. passwordHash byte[] The resulting hashed password as a byte array. passwordSalt byte[] The generated salt used for hashing as a byte array. RandomString(int, string) Generates a random string of specified length using allowed characters. public static string RandomString(int length = 32, string allowedChars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\") Parameters length int The length of the random string to generate. allowedChars string A string containing characters that can be used in the random string. Returns string A random string of the specified length composed of characters from the allowedChars string. VerifyPassword(string, byte[], byte[]) Verifies if the provided password matches the stored password hash using the provided salt. public static bool VerifyPassword(string password, byte[] passwordHash, byte[] passwordSalt) Parameters password string The plain text password to verify. passwordHash byte[] The stored hashed password as a byte array. passwordSalt byte[] The salt used to hash the stored password. Returns bool Returns true if the password is valid; otherwise, false."
  },
  "api/Snipster.Library.Helpers.StringFx.html": {
    "href": "api/Snipster.Library.Helpers.StringFx.html",
    "title": "Class StringFx | Snipster",
    "summary": "Class StringFx Namespace Snipster.Library.Helpers Assembly Snipster.Library.dll Provides various string manipulation and validation methods. public static class StringFx Inheritance object StringFx Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods FormatBytes(long, int) Formats a byte size into a human-readable string (e.g. \"1.5 MB\", \"200 KB\"). public static string FormatBytes(long bytes, int decimals = 2) Parameters bytes long The size in bytes to format. decimals int The number of decimal places to include in the formatted string (default is 2). Returns string A formatted string representing the byte size in a human-readable format, such as \"1.5 MB\" or \"200 KB\". If the input is negative, it will prepend a minus sign to the result. GenerateGuid(bool) Generates a new GUID as a string. public static string GenerateGuid(bool includeDashes) Parameters includeDashes bool If true, the GUID will include dashes; otherwise, it will be a continuous string without dashes. Returns string A string representation of a new GUID. If includeDashes is true, the format will be \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"; GenerateUniqueUsername(string, string, Func<string, bool>) Generates a unique username using the first and last name. Appends a number if the base username is already taken. public static string GenerateUniqueUsername(string firstName, string lastName, Func<string, bool> isUsernameTaken) Parameters firstName string The user's first name. lastName string The user's last name. isUsernameTaken Func<string, bool> A delegate to check if a username is already taken. Returns string A unique username generated from the first and last name, ensuring it is not already taken. Exceptions ArgumentException Thrown when first name or last name is null or empty. ArgumentNullException Thrown when the username check function is null."
  },
  "api/Snipster.Library.Helpers.html": {
    "href": "api/Snipster.Library.Helpers.html",
    "title": "Namespace Snipster.Library.Helpers | Snipster",
    "summary": "Namespace Snipster.Library.Helpers Classes ExcelFx A class that provides Excel files related utility functions. FileFx A class that provides file-related utility functions. JsonFx Provides methods for manipulating JSON strings. NetworkFx A class that provides network-related functionality. ObjectFx A class that provides object-related utility functions. SecurityFx Provides various security-related helper methods and functionalities. StringFx Provides various string manipulation and validation methods."
  },
  "api/Snipster.Library.Models.ExcelColumn.html": {
    "href": "api/Snipster.Library.Models.ExcelColumn.html",
    "title": "Class ExcelColumn | Snipster",
    "summary": "Class ExcelColumn Namespace Snipster.Library.Models Assembly Snipster.Library.dll Defines the properties and formatting options for a column in an Excel export. public class ExcelColumn Inheritance object ExcelColumn Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectValEx.IsDefaultValue<T>(T) ObjectFx.DeepClone<T>(T) JsonEx.ToJson(object, Formatting) ObjectEx.GetPropertyValue(object, string) ObjectEx.SetPropertyValue(object, string, object?) ObjectValEx.HasProperty(object, string) Properties Alignment Alignment customization for column data cells. public ExcelAlignment? Alignment { get; set; } Property Value ExcelAlignment? DataType Gets or sets the data type of the column (e.g., typeof(int), typeof(string), typeof(DateTime)). public Type DataType { get; set; } Property Value Type FalseText Gets or sets the text to display for false boolean values. If null, defaults to \"False\". public string FalseText { get; set; } Property Value string Format Gets or sets the Excel format string to apply to the column (e.g., \"#,##0.00\" for numbers, \"yyyy-MM-dd\" for dates). public string Format { get; set; } Property Value string HeaderAlignment Alignment customization for header cell. public ExcelAlignment? HeaderAlignment { get; set; } Property Value ExcelAlignment? HeaderText Gets or sets the header text to display for this column in the Excel sheet. public string HeaderText { get; set; } Property Value string Name Gets or sets the property name from the data source that this column represents. public string Name { get; set; } Property Value string TrueText Gets or sets the text to display for true boolean values. If null, defaults to \"True\". public string TrueText { get; set; } Property Value string Width Gets or sets the width of the column in characters. If the AutoFitColumns option is enabled, this value may be overridden. public double Width { get; set; } Property Value double"
  },
  "api/Snipster.Library.Models.ExcelExportOptions.html": {
    "href": "api/Snipster.Library.Models.ExcelExportOptions.html",
    "title": "Class ExcelExportOptions | Snipster",
    "summary": "Class ExcelExportOptions Namespace Snipster.Library.Models Assembly Snipster.Library.dll Defines options for exporting data to an Excel file, including formatting and layout preferences. public class ExcelExportOptions Inheritance object ExcelExportOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectValEx.IsDefaultValue<T>(T) ObjectFx.DeepClone<T>(T) JsonEx.ToJson(object, Formatting) ObjectEx.GetPropertyValue(object, string) ObjectEx.SetPropertyValue(object, string, object?) ObjectValEx.HasProperty(object, string) Properties AlternateRowColor Gets or sets the color used for alternating rows when AlternateRowColors is true. public Color AlternateRowColor { get; set; } Property Value Color AlternateRowColors Gets or sets a value indicating whether to apply alternating row colors for better readability. public bool AlternateRowColors { get; set; } Property Value bool AutoFitColumns Gets or sets a value indicating whether to automatically adjust column widths to fit content. public bool AutoFitColumns { get; set; } Property Value bool FreezeHeader Gets or sets a value indicating whether to freeze the header row, keeping it visible during scrolling. public bool FreezeHeader { get; set; } Property Value bool HeaderBackground Gets or sets the background color for the header row. public Color HeaderBackground { get; set; } Property Value Color SheetName Gets or sets the name of the worksheet within the Excel file. public string SheetName { get; set; } Property Value string"
  },
  "api/Snipster.Library.Models.ExcelFormats.html": {
    "href": "api/Snipster.Library.Models.ExcelFormats.html",
    "title": "Class ExcelFormats | Snipster",
    "summary": "Class ExcelFormats Namespace Snipster.Library.Models Assembly Snipster.Library.dll Provides commonly used Excel number, date, and text format strings. Use these constants when defining Format. public static class ExcelFormats Inheritance object ExcelFormats Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields Currency Currency with symbol and two decimals (e.g., $1,234.56). public const string Currency = \"$#,##0.00\" Field Value string DateLong Long date format (e.g., 20-Sep-2025). public const string DateLong = \"dddd, MMMM dd, yyyy\" Field Value string DateShort Short date format (e.g., 2025-09-20). public const string DateShort = \"yyyy-MM-dd\" Field Value string DateTime Date and time format (e.g., 2025-09-20 18:45). public const string DateTime = \"yyyy-MM-dd HH:mm\" Field Value string Double Double with thousands separator and two decimals (e.g., 1,234.56). public const string Double = \"#,##0.00\" Field Value string General General format (default, no specific formatting). public const string General = \"General\" Field Value string Integer Whole numbers with thousands separator (e.g., 1,234). public const string Integer = \"#,##0\" Field Value string Percent Percentage with two decimals (e.g., 12.34%). public const string Percent = \"0.00%\" Field Value string Text Text format (treats content as text). public const string Text = \"@\" Field Value string"
  },
  "api/Snipster.Library.Models.html": {
    "href": "api/Snipster.Library.Models.html",
    "title": "Namespace Snipster.Library.Models | Snipster",
    "summary": "Namespace Snipster.Library.Models Classes ExcelColumn Defines the properties and formatting options for a column in an Excel export. ExcelExportOptions Defines options for exporting data to an Excel file, including formatting and layout preferences. ExcelFormats Provides commonly used Excel number, date, and text format strings. Use these constants when defining Format."
  },
  "api/Snipster.Library.Repository.GenericRepository-1.html": {
    "href": "api/Snipster.Library.Repository.GenericRepository-1.html",
    "title": "Class GenericRepository<TEntity> | Snipster",
    "summary": "Class GenericRepository<TEntity> Namespace Snipster.Library.Repository Assembly Snipster.Library.dll Provides a generic implementation of IGenericRepository<TEntity> for performing CRUD operations with a shared DbContext. public sealed class GenericRepository<TEntity> : IGenericRepository<TEntity> where TEntity : class Type Parameters TEntity Inheritance object GenericRepository<TEntity> Implements IGenericRepository<TEntity> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectValEx.IsDefaultValue<T>(T) ObjectFx.DeepClone<T>(T) JsonEx.ToJson(object, Formatting) ObjectEx.GetPropertyValue(object, string) ObjectEx.SetPropertyValue(object, string, object?) ObjectValEx.HasProperty(object, string) Constructors GenericRepository(DbContext) Initializes a new instance of the GenericRepository<TEntity> class. public GenericRepository(DbContext context) Parameters context DbContext The DbContext to use for database operations. Exceptions ArgumentNullException Thrown when context is null. Methods AddAsync(TEntity) Adds a new entity to the database. public Task AddAsync(TEntity entity) Parameters entity TEntity The entity to add. Returns Task AddRangeAsync(IEnumerable<TEntity>) Adds multiple entities to the database. public Task AddRangeAsync(IEnumerable<TEntity> entities) Parameters entities IEnumerable<TEntity> The list of entities to add. Returns Task GetAllAsync(Func<IQueryable<TEntity>, IQueryable<TEntity>>?) Retrieves all entities with optional eager loading. public Task<IEnumerable<TEntity>> GetAllAsync(Func<IQueryable<TEntity>, IQueryable<TEntity>>? include = null) Parameters include Func<IQueryable<TEntity>, IQueryable<TEntity>> Optional function to include related entities. Returns Task<IEnumerable<TEntity>> GetAllByConditionAsync(Expression<Func<TEntity, bool>>, Func<IQueryable<TEntity>, IQueryable<TEntity>>?) Retrieves all entities matching a condition, with optional eager loading. public Task<IEnumerable<TEntity>> GetAllByConditionAsync(Expression<Func<TEntity, bool>> predicate, Func<IQueryable<TEntity>, IQueryable<TEntity>>? include = null) Parameters predicate Expression<Func<TEntity, bool>> The filter expression. include Func<IQueryable<TEntity>, IQueryable<TEntity>> Optional function to include related entities. Returns Task<IEnumerable<TEntity>> GetByConditionAsync(Expression<Func<TEntity, bool>>, Func<IQueryable<TEntity>, IQueryable<TEntity>>?) Retrieves the first entity matching a condition, with optional eager loading. public Task<TEntity?> GetByConditionAsync(Expression<Func<TEntity, bool>> predicate, Func<IQueryable<TEntity>, IQueryable<TEntity>>? include = null) Parameters predicate Expression<Func<TEntity, bool>> The filter expression. include Func<IQueryable<TEntity>, IQueryable<TEntity>> Optional function to include related entities. Returns Task<TEntity> GetSelectedColumnsAsync<TResult>(Expression<Func<TEntity, TResult>>) Projects a selection of fields from entities. public Task<IEnumerable<TResult>> GetSelectedColumnsAsync<TResult>(Expression<Func<TEntity, TResult>> selector) Parameters selector Expression<Func<TEntity, TResult>> Expression defining selected fields. Returns Task<IEnumerable<TResult>> Type Parameters TResult The type of the projected result. IsExistAsync(Expression<Func<TEntity, bool>>) Determines if any entity exists that matches a condition. public Task<bool> IsExistAsync(Expression<Func<TEntity, bool>> predicate) Parameters predicate Expression<Func<TEntity, bool>> The filter expression. Returns Task<bool> Remove(TEntity) Removes an entity from the database. public void Remove(TEntity entity) Parameters entity TEntity The entity to remove. RemoveAsync(object) Removes an entity by its identifier. public Task RemoveAsync(object id) Parameters id object The primary key of the entity to remove. Returns Task SaveChangesAsync() Saves all changes made to the database. public Task<bool> SaveChangesAsync() Returns Task<bool> Update(TEntity) Updates an existing entity. public void Update(TEntity entity) Parameters entity TEntity The entity to update. UpdateRange(IEnumerable<TEntity>) Updates multiple entities. public void UpdateRange(IEnumerable<TEntity> entities) Parameters entities IEnumerable<TEntity> The list of entities to update."
  },
  "api/Snipster.Library.Repository.IGenericRepository-1.html": {
    "href": "api/Snipster.Library.Repository.IGenericRepository-1.html",
    "title": "Interface IGenericRepository<TEntity> | Snipster",
    "summary": "Interface IGenericRepository<TEntity> Namespace Snipster.Library.Repository Assembly Snipster.Library.dll Defines the contract for basic CRUD operations on entities of type TEntity. public interface IGenericRepository<TEntity> where TEntity : class Type Parameters TEntity Extension Methods ObjectValEx.IsDefaultValue<T>(T) ObjectFx.DeepClone<T>(T) JsonEx.ToJson(object, Formatting) ObjectEx.GetPropertyValue(object, string) ObjectEx.SetPropertyValue(object, string, object?) ObjectValEx.HasProperty(object, string) Methods AddAsync(TEntity) Adds a new entity to the database. Task AddAsync(TEntity entity) Parameters entity TEntity The entity to add. Returns Task AddRangeAsync(IEnumerable<TEntity>) Adds multiple entities to the database. Task AddRangeAsync(IEnumerable<TEntity> entities) Parameters entities IEnumerable<TEntity> The list of entities to add. Returns Task GetAllAsync(Func<IQueryable<TEntity>, IQueryable<TEntity>>?) Retrieves all entities with optional eager loading. Task<IEnumerable<TEntity>> GetAllAsync(Func<IQueryable<TEntity>, IQueryable<TEntity>>? include = null) Parameters include Func<IQueryable<TEntity>, IQueryable<TEntity>> Optional function to include related entities. Returns Task<IEnumerable<TEntity>> GetAllByConditionAsync(Expression<Func<TEntity, bool>>, Func<IQueryable<TEntity>, IQueryable<TEntity>>?) Retrieves all entities matching a condition, with optional eager loading. Task<IEnumerable<TEntity>> GetAllByConditionAsync(Expression<Func<TEntity, bool>> predicate, Func<IQueryable<TEntity>, IQueryable<TEntity>>? include = null) Parameters predicate Expression<Func<TEntity, bool>> The filter expression. include Func<IQueryable<TEntity>, IQueryable<TEntity>> Optional function to include related entities. Returns Task<IEnumerable<TEntity>> GetByConditionAsync(Expression<Func<TEntity, bool>>, Func<IQueryable<TEntity>, IQueryable<TEntity>>?) Retrieves the first entity matching a condition, with optional eager loading. Task<TEntity?> GetByConditionAsync(Expression<Func<TEntity, bool>> predicate, Func<IQueryable<TEntity>, IQueryable<TEntity>>? include = null) Parameters predicate Expression<Func<TEntity, bool>> The filter expression. include Func<IQueryable<TEntity>, IQueryable<TEntity>> Optional function to include related entities. Returns Task<TEntity> GetSelectedColumnsAsync<TResult>(Expression<Func<TEntity, TResult>>) Projects a selection of fields from entities. Task<IEnumerable<TResult>> GetSelectedColumnsAsync<TResult>(Expression<Func<TEntity, TResult>> selector) Parameters selector Expression<Func<TEntity, TResult>> Expression defining selected fields. Returns Task<IEnumerable<TResult>> Type Parameters TResult The type of the projected result. IsExistAsync(Expression<Func<TEntity, bool>>) Determines if any entity exists that matches a condition. Task<bool> IsExistAsync(Expression<Func<TEntity, bool>> predicate) Parameters predicate Expression<Func<TEntity, bool>> The filter expression. Returns Task<bool> Remove(TEntity) Removes an entity from the database. void Remove(TEntity entity) Parameters entity TEntity The entity to remove. RemoveAsync(object) Removes an entity by its identifier. Task RemoveAsync(object id) Parameters id object The primary key of the entity to remove. Returns Task SaveChangesAsync() Saves all changes made to the database. Task<bool> SaveChangesAsync() Returns Task<bool> Update(TEntity) Updates an existing entity. void Update(TEntity entity) Parameters entity TEntity The entity to update. UpdateRange(IEnumerable<TEntity>) Updates multiple entities. void UpdateRange(IEnumerable<TEntity> entities) Parameters entities IEnumerable<TEntity> The list of entities to update."
  },
  "api/Snipster.Library.Repository.html": {
    "href": "api/Snipster.Library.Repository.html",
    "title": "Namespace Snipster.Library.Repository | Snipster",
    "summary": "Namespace Snipster.Library.Repository Classes GenericRepository<TEntity> Provides a generic implementation of IGenericRepository<TEntity> for performing CRUD operations with a shared DbContext. Interfaces IGenericRepository<TEntity> Defines the contract for basic CRUD operations on entities of type TEntity."
  },
  "api/Snipster.Library.UOW.IUnitOfWork.html": {
    "href": "api/Snipster.Library.UOW.IUnitOfWork.html",
    "title": "Interface IUnitOfWork | Snipster",
    "summary": "Interface IUnitOfWork Namespace Snipster.Library.UOW Assembly Snipster.Library.dll Defines the contract for the Unit of Work pattern, which coordinates changes across multiple repositories and manages database transactions. Warning: Do not implement this interface yourself. It uses the default IGenericRepository<TEntity> provided by this package. Use the provided implementation from the package instead. Note: You may implement your own IGenericRepository<TEntity> if you want custom repository behavior. The UnitOfWork can work with your custom repository implementation as long as it implements IGenericRepository<TEntity>. public interface IUnitOfWork : IDisposable Inherited Members IDisposable.Dispose() Extension Methods ObjectValEx.IsDefaultValue<T>(T) ObjectFx.DeepClone<T>(T) JsonEx.ToJson(object, Formatting) ObjectEx.GetPropertyValue(object, string) ObjectEx.SetPropertyValue(object, string, object?) ObjectValEx.HasProperty(object, string) Methods BeginTransactionAsync() Asynchronously begins a new database transaction. Task BeginTransactionAsync() Returns Task CommitAsync() Asynchronously commits the current transaction, saving all changes to the database. Task CommitAsync() Returns Task Repository<TEntity>() Gets the repository instance for the specified entity type. IGenericRepository<TEntity> Repository<TEntity>() where TEntity : class Returns IGenericRepository<TEntity> An IGenericRepository<TEntity> instance for the given entity type. Type Parameters TEntity The type of the entity. RollbackAsync() Asynchronously rolls back the current transaction, discarding all changes that were made during the transaction. Task RollbackAsync() Returns Task SaveChangesAsync() Saves all changes made to the database. Task<bool> SaveChangesAsync() Returns Task<bool>"
  },
  "api/Snipster.Library.UOW.UnitOfWork.html": {
    "href": "api/Snipster.Library.UOW.UnitOfWork.html",
    "title": "Class UnitOfWork | Snipster",
    "summary": "Class UnitOfWork Namespace Snipster.Library.UOW Assembly Snipster.Library.dll Provides an implementation of the Unit of Work pattern, managing database transactions and repositories. public sealed class UnitOfWork : IUnitOfWork, IDisposable Inheritance object UnitOfWork Implements IUnitOfWork IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectValEx.IsDefaultValue<T>(T) ObjectFx.DeepClone<T>(T) JsonEx.ToJson(object, Formatting) ObjectEx.GetPropertyValue(object, string) ObjectEx.SetPropertyValue(object, string, object?) ObjectValEx.HasProperty(object, string) Constructors UnitOfWork(DbContext, bool) Initializes a new instance of the UnitOfWork class. public UnitOfWork(DbContext context, bool disposeContext = true) Parameters context DbContext The database context to be used for the unit of work. disposeContext bool Whether the UnitOfWork owns the DbContext and should dispose it. Exceptions ArgumentNullException Thrown when context is null. Methods BeginTransactionAsync() Asynchronously begins a new database transaction. public Task BeginTransactionAsync() Returns Task CommitAsync() Asynchronously commits the current transaction, saving all changes to the database. public Task CommitAsync() Returns Task Dispose() Disposes the transaction (if any) and the underlying DbContext resources. public void Dispose() Repository<TEntity>() Gets the repository instance for the specified entity type. public IGenericRepository<TEntity> Repository<TEntity>() where TEntity : class Returns IGenericRepository<TEntity> An IGenericRepository<TEntity> instance for the given entity type. Type Parameters TEntity The type of the entity. RollbackAsync() Asynchronously rolls back the current transaction, discarding all changes that were made during the transaction. public Task RollbackAsync() Returns Task SaveChangesAsync() Saves all changes made to the database. public Task<bool> SaveChangesAsync() Returns Task<bool>"
  },
  "api/Snipster.Library.UOW.html": {
    "href": "api/Snipster.Library.UOW.html",
    "title": "Namespace Snipster.Library.UOW | Snipster",
    "summary": "Namespace Snipster.Library.UOW Classes UnitOfWork Provides an implementation of the Unit of Work pattern, managing database transactions and repositories. Interfaces IUnitOfWork Defines the contract for the Unit of Work pattern, which coordinates changes across multiple repositories and manages database transactions. Warning: Do not implement this interface yourself. It uses the default IGenericRepository<TEntity> provided by this package. Use the provided implementation from the package instead. Note: You may implement your own IGenericRepository<TEntity> if you want custom repository behavior. The UnitOfWork can work with your custom repository implementation as long as it implements IGenericRepository<TEntity>."
  },
  "docs/cache/removecache.html": {
    "href": "docs/cache/removecache.html",
    "title": "RemoveCache() | Snipster",
    "summary": "Description Removes a specific entry from the cache. Method Signature void RemoveCache(string key) Examples using Snipster.Library.Cache; namespace Test.Services { /// <summary> /// Demonstrates usage of <see cref=\"ICacheService\"/> within a service class. /// </summary> public class TestService { private readonly ICacheService _cacheService; /// <summary> /// Initializes a new instance of the <see cref=\"TestService\"/> class. /// </summary> /// <param name=\"cacheService\">The cache service used for storing and retrieving cached data.</param> public TestService(ICacheService cacheService) { _cacheService = cacheService; } /// <summary> /// Removes a specific cache entry by key. /// </summary> public void RemoveUserCache(int userId) { string cacheKey = $\"user_{userId}\"; _cacheService.RemoveCache(cacheKey); } } }"
  },
  "docs/cache/setcacheasync.html": {
    "href": "docs/cache/setcacheasync.html",
    "title": "SetCacheAsync<T>() | Snipster",
    "summary": "Description Retrieves data from the cache or loads it using the provided function if not cached. Data is cached for 5 minutes. Method Signature Task<T?> SetCacheAsync<T>(string key, Func<Task<T>> create) where T : class Examples using Snipster.Library.Cache; namespace Test.Services { /// <summary> /// Demonstrates usage of <see cref=\"ICacheService\"/> within a service class. /// </summary> public class TestService { private readonly ICacheService _cacheService; /// <summary> /// Initializes a new instance of the <see cref=\"TestService\"/> class. /// </summary> /// <param name=\"cacheService\">The cache service used for storing and retrieving cached data.</param> public TestService(ICacheService cacheService) { _cacheService = cacheService; } /// <summary> /// Retrieves user data with short-term caching. /// </summary> public async Task<User?> GetUserAsync(int userId) { string cacheKey = $\"user_{userId}\"; return await _cacheService.SetCacheAsync( cacheKey, async () => { // Simulate fetching user from database or API await Task.Delay(100); return new User { Id = userId, Name = \"John Doe\" }; }); } } }"
  },
  "docs/cache/setcacheasyncext.html": {
    "href": "docs/cache/setcacheasyncext.html",
    "title": "SetCacheAsync<T>() | Snipster",
    "summary": "Description Retrieves data from the cache or loads it using the provided function if not cached. Method Signature Task<T?> SetCacheAsync<T>(string key, double duration, Func<Task<T>> create) where T : class Examples using Snipster.Library.Cache; namespace Test.Services { /// <summary> /// Demonstrates usage of <see cref=\"ICacheService\"/> within a service class. /// </summary> public class TestService { private readonly ICacheService _cacheService; /// <summary> /// Initializes a new instance of the <see cref=\"TestService\"/> class. /// </summary> /// <param name=\"cacheService\">The cache service used for storing and retrieving cached data.</param> public TestService(ICacheService cacheService) { _cacheService = cacheService; } /// <summary> /// Retrieves user data with a custom cache duration. /// </summary> public async Task<User?> GetUserAsync(int userId) { string cacheKey = $\"user_{userId}\"; return await _cacheService.SetCacheAsync( cacheKey, duration: 10 async () => { // Simulate fetching user from database or API await Task.Delay(100); return new User { Id = userId, Name = \"John Doe\" }; }); } } }"
  },
  "docs/cache/setlongcacheasync.html": {
    "href": "docs/cache/setlongcacheasync.html",
    "title": "SetLongCacheAsync<T>() | Snipster",
    "summary": "Description Retrieves data from the cache or loads it using the provided function if not cached. Data is cached for 60 minutes. Method Signature Task<T?> SetLongCacheAsync<T>(string key, Func<Task<T>> create) where T : class Examples using Snipster.Library.Cache; namespace Test.Services { /// <summary> /// Demonstrates usage of <see cref=\"ICacheService\"/> within a service class. /// </summary> public class TestService { private readonly ICacheService _cacheService; /// <summary> /// Initializes a new instance of the <see cref=\"TestService\"/> class. /// </summary> /// <param name=\"cacheService\">The cache service used for storing and retrieving cached data.</param> public TestService(ICacheService cacheService) { _cacheService = cacheService; } /// <summary> /// Retrieves user data with long-term caching. /// </summary> public async Task<User?> GetUserAsync(int userId) { string cacheKey = $\"user_{userId}\"; return await _cacheService.SetLongCacheAsync( cacheKey, async () => { // Simulate fetching user from database or API await Task.Delay(100); return new User { Id = userId, Name = \"John Doe\" }; }); } } }"
  },
  "docs/cache/setup.html": {
    "href": "docs/cache/setup.html",
    "title": "Setup | Snipster",
    "summary": "Registering the ICacheService in Dependency Injection To make the caching functionality available throughout your application, register the ICacheService and its implementation in the Dependency Injection (DI) container — typically inside Program.cs (or Startup.cs for older ASP.NET Core versions). 1. Add the Cache Service to the DI Container // Program.cs using Snipster.Library.Cache; var builder = WebApplication.CreateBuilder(args); // Register cache service services.AddSingleton<ICacheService, CacheService>(); var app = builder.Build(); app.Run(); 2. Implement ICacheService using Snipster.Library.Cache; public class MyCacheService : ICacheService { private readonly IMemoryCache _cache; public MyCacheService(IMemoryCache cache) { _cache = cache; } public async Task<T?> SetCacheAsync<T>(string key, Func<Task<T>> create) where T : class { ... } ... } Note AddSingleton<ICacheService, CacheService>() — Registers the cache service as a singleton, ensuring a single shared instance of the cache is used throughout the application’s lifetime. This allows you to inject ICacheService into any class (such as services or controllers) for centralized caching operations. By implementing ICacheService, you can customize your caching logic as needed."
  },
  "docs/ex/collection-ex/chunkby.html": {
    "href": "docs/ex/collection-ex/chunkby.html",
    "title": "ChunkBy<T>() | Snipster",
    "summary": "Description Splits a collection into chunks of the specified size. Method Signature IEnumerable<IEnumerable<T>> ChunkBy<T>(this IEnumerable<T> source, int size) Examples using Snipster.Library.Extensions; public class Example { public static void Main() { var numbers = Enumerable.Range(1, 10); var chunks = numbers.ChunkBy(3); foreach (var chunk in chunks) { Console.WriteLine(string.Join(\", \", chunk)); } // Output: // 1, 2, 3 // 4, 5, 6 // 7, 8, 9 // 10 } }"
  },
  "docs/ex/collection-ex/exceptsafe.html": {
    "href": "docs/ex/collection-ex/exceptsafe.html",
    "title": "ExceptSafe<T>() | Snipster",
    "summary": "Description Compares two collections and returns elements only in the first. Method Signature IEnumerable<T> ExceptSafe<T>(this IEnumerable<T> source, IEnumerable<T> other) Examples using Snipster.Library.Extensions; public class Example { public static void Main() { var first = new[] { 1, 2, 3 }; var second = new[] { 2, 3, 4 }; var result = first.ExceptSafe(second); // result -> [1] } }"
  },
  "docs/ex/collection-ex/foreach.html": {
    "href": "docs/ex/collection-ex/foreach.html",
    "title": "ForEach<T>() | Snipster",
    "summary": "Description Executes an action for each element in the collection. Method Signature void ForEach<T>(this IEnumerable<T> source, Action<T> action) Examples using Snipster.Library.Extensions; public class Example { public static void Main() { var numbers = new[] { 1, 2, 3 }; numbers.ForEach(n => Console.WriteLine(n * 2)); // Output: 2, 4, 6 } }"
  },
  "docs/ex/collection-ex/leastcommon.html": {
    "href": "docs/ex/collection-ex/leastcommon.html",
    "title": "LeastCommon<T>() | Snipster",
    "summary": "Description Returns the least frequent item in the collection. Method Signature T LeastCommon<T>(this IEnumerable<T> source) Examples using Snipster.Library.Extensions; public class Example { public static void Main() { var numbers = new[] { 1, 2, 2, 3, 3, 3 }; var result = numbers.LeastCommon(); // result -> 1 } }"
  },
  "docs/ex/collection-ex/mostcommon.html": {
    "href": "docs/ex/collection-ex/mostcommon.html",
    "title": "MostCommon<T>() | Snipster",
    "summary": "Description Returns the most frequent item in the collection. Method Signature T MostCommon<T>(this IEnumerable<T> source) Examples using Snipster.Library.Extensions; public class Example { public static void Main() { var numbers = new[] { 1, 2, 2, 3, 3, 3 }; var result = numbers.MostCommon(); // result -> 3 } }"
  },
  "docs/ex/collection-ex/randomitem.html": {
    "href": "docs/ex/collection-ex/randomitem.html",
    "title": "RandomItem<T>() | Snipster",
    "summary": "Description Returns a random element from a collection. Method Signature T RandomItem<T>(this IEnumerable<T> source) Examples using Snipster.Library.Extensions; public class Example { public static void Main() { var colors = new[] { \"Red\", \"Green\", \"Blue\" }; var randomColor = colors.RandomItem(); // randomColor -> \"Green\" (varies) } }"
  },
  "docs/ex/collection-ex/shuffle.html": {
    "href": "docs/ex/collection-ex/shuffle.html",
    "title": "Shuffle<T>() | Snipster",
    "summary": "Description Shuffles the collection randomly. Method Signature IEnumerable<T> Shuffle<T>(this IEnumerable<T> source) Examples using Snipster.Library.Extensions; public class Example { public static void Main() { var numbers = Enumerable.Range(1, 5); var shuffled = numbers.Shuffle(); // Example output: 3, 1, 5, 2, 4 } }"
  },
  "docs/ex/collection-ex/tosafedictionary.html": {
    "href": "docs/ex/collection-ex/tosafedictionary.html",
    "title": "ToSafeDictionary<TSource, TKey, TValue>() | Snipster",
    "summary": "Description Returns a dictionary from a list safely and skips duplicate keys. Method Signature Dictionary<TKey, TValue> ToSafeDictionary<TSource, TKey, TValue>(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TValue> valueSelector) where TKey : notnull Examples using Snipster.Library.Extensions; public class Example { public static void Main() { var items = new[] { new { Key = 1, Value = \"A\" }, new { Key = 2, Value = \"B\" }, new { Key = 1, Value = \"C\" } // duplicate key }; var dict = items.ToSafeDictionary(x => x.Key, x => x.Value); // Result: { 1: \"A\", 2: \"B\" } } }"
  },
  "docs/ex/creditcard-ex/getcreditcardtype.html": {
    "href": "docs/ex/creditcard-ex/getcreditcardtype.html",
    "title": "GetCreditCardType() | Snipster",
    "summary": "Description Determines the type of credit card based on its number. Supports various card types such as Visa, MasterCard, American Express, Discover, JCB, and Diners Club. Method Signature string GetCreditCardType(this string number) Examples using Snipster.Library.Extensions; public class Example { public static void Main() { string visaCard = \"4111111111111111\"; string result = visaCard.GetCreditCardType(); // result -> \"Visa\" string masterCard = \"5555555555554444\"; string result = masterCard.GetCreditCardType(); // result -> \"MasterCard\" string amex = \"378282246310005\"; string result = amex.GetCreditCardType(); // result -> \"American Express\" string discover = \"6011111111111117\"; string result = discover.GetCreditCardType(); // result -> \"Discover\" string jcb = \"3530111333300000\"; string result = jcb.GetCreditCardType(); // result -> \"JCB\" string diners = \"30569309025904\"; string result = diners.GetCreditCardType(); // result -> \"Diners Club\" string invalid = \"1234567890123456\"; string result = invalid.GetCreditCardType(); // result -> \"Unknown\" string empty = \"\"; string result = empty.GetCreditCardType(); // result -> \"Unknown\" string nonNumeric = \"abcd1234\"; string result = nonNumeric.GetCreditCardType(); // result -> \"Unknown\" } }"
  },
  "docs/ex/datetime-ex/endofday.html": {
    "href": "docs/ex/datetime-ex/endofday.html",
    "title": "EndOfDay() | Snipster",
    "summary": "Description Converts DateTime to the end of the day (23:59:59.999). Method Signature DateTime EndOfDay(this DateTime date) Examples using Snipster.Library.Extensions; public class Example { public static void Main() { var date = new DateTime(2023, 10, 1, 15, 30, 45); var result = date.EndOfDay(); // result -> 2023-10-01 23:59:59.999 } }"
  },
  "docs/ex/datetime-ex/fromtimezone.html": {
    "href": "docs/ex/datetime-ex/fromtimezone.html",
    "title": "FromTimeZone() | Snipster",
    "summary": "Description Converts a date from a specific time zone to UTC. Method Signature DateTime FromTimeZone(this DateTime date, string timeZoneId) Examples using Snipster.Library.Extensions; public class Example { public static void Main() { var localDate = new DateTime(2023, 10, 1, 12, 0, 0); var utcDate = localDate.FromTimeZone(\"Pacific Standard Time\"); // utcDate -> 10/1/2023 7:00:00 PM } }"
  },
  "docs/ex/datetime-ex/fromunixtimestamp.html": {
    "href": "docs/ex/datetime-ex/fromunixtimestamp.html",
    "title": "FromUnixTimestamp() | Snipster",
    "summary": "Description Converts a Unix timestamp to DateTime (UTC). e.g. 1609459200 to 2021-01-01T00:00:00Z. Method Signature DateTime FromUnixTimestamp(this long timestamp) Examples using Snipster.Library.Extensions; public class Example { public static void Main() { long timestamp = 1609459200; DateTime date = timestamp.FromUnixTimestamp(); // date -> 2021-01-01 00:00:00 (UTC) } }"
  },
  "docs/ex/datetime-ex/getweekenddate.html": {
    "href": "docs/ex/datetime-ex/getweekenddate.html",
    "title": "GetWeekEndDate() | Snipster",
    "summary": "Description Returns the end of the week (Sunday) for the specified DateTime. Method Signature DateTime GetWeekEndDate(this DateTime date) Examples using Snipster.Library.Extensions; public class Example { public static void Main() { var date = new DateTime(2025, 7, 30); // Wednesday DateTime result = date.GetWeekEndDate(); // result -> 2025-08-03 23:59:59.9999999 } }"
  },
  "docs/ex/datetime-ex/getweekofyear.html": {
    "href": "docs/ex/datetime-ex/getweekofyear.html",
    "title": "GetWeekOfYear() | Snipster",
    "summary": "Description Gets the week number of the year (ISO 8601). e.g. 1 for the first week of the year. Method Signature int GetWeekOfYear(this DateTime date) Examples using Snipster.Library.Extensions; public class Example { public static void Main() { var date = new DateTime(2023, 1, 4); int week = date.GetWeekOfYear(); // week -> 1 } }"
  },
  "docs/ex/datetime-ex/getweekstartdate.html": {
    "href": "docs/ex/datetime-ex/getweekstartdate.html",
    "title": "GetWeekStartDate() | Snipster",
    "summary": "Description Returns the start of the week (Monday) for the specified DateTime. Method Signature DateTime GetWeekStartDate(this DateTime date) Examples using Snipster.Library.Extensions; public class Example { public static void Main() { var date = new DateTime(2023, 1, 4); // Wednesday DateTime result = date.GetWeekStartDate(); // result -> 2023-01-02 (Monday) } }"
  },
  "docs/ex/datetime-ex/startofday.html": {
    "href": "docs/ex/datetime-ex/startofday.html",
    "title": "StartOfDay() | Snipster",
    "summary": "Description Converts DateTime to the start of the day (00:00:00). Method Signature DateTime StartOfDay(this DateTime date) Examples using Snipster.Library.Extensions; public class Example { public static void Main() { var date = new DateTime(2023, 10, 1, 15, 30, 45); var result = date.StartOfDay(); // result -> 2023-10-01 00:00:00 } }"
  },
  "docs/ex/datetime-ex/toage.html": {
    "href": "docs/ex/datetime-ex/toage.html",
    "title": "ToAge() | Snipster",
    "summary": "Description Returns the age based on date of birth. e.g. if born on 1990-01-01 and today is 2023-10-01, returns 33. Method Signature int ToAge(this DateTime birthDate) Examples using Snipster.Library.Extensions; public class Example { public static void Main() { var birthDate = new DateTime(1990, 1, 1); int age = birthDate.ToAge(); // age -> e.g. 35 (depending on current date) } }"
  },
  "docs/ex/datetime-ex/todatestring.html": {
    "href": "docs/ex/datetime-ex/todatestring.html",
    "title": "ToDateString() | Snipster",
    "summary": "Description Formats a DateTime as a date string of yyyy-MM-dd. Method Signature string ToDateString(this DateTime date) Examples using Snipster.Library.Extensions; public class Example { public static void Main() { var date = new DateTime(2023, 10, 1); string result = date.ToDateString(); // result -> \"2023-10-01\" } }"
  },
  "docs/ex/datetime-ex/tofulldatetimestring.html": {
    "href": "docs/ex/datetime-ex/tofulldatetimestring.html",
    "title": "ToFullDateTimeString() | Snipster",
    "summary": "Description Formats a DateTime as a full date and time string of yyyy-MM-dd HH:mm:ss. Method Signature string ToFullDateTimeString(this DateTime date) Examples using Snipster.Library.Extensions; public class Example { public static void Main() { var date = new DateTime(2023, 10, 1, 15, 30, 45); string result = date.ToFullDateTimeString(); // result -> \"2023-10-01 15:30:45\" } }"
  },
  "docs/ex/datetime-ex/totimeago.html": {
    "href": "docs/ex/datetime-ex/totimeago.html",
    "title": "ToTimeAgo() | Snipster",
    "summary": "Description Returns a human-readable \"time ago\" string (e.g. \"3 hours ago\"). Method Signature string ToTimeAgo(this DateTime date) Examples using Snipster.Library.Extensions; public class Example { public static void Main() { var date = DateTime.UtcNow.AddHours(-3); string result = date.ToTimeAgo(); // result -> \"3 hours ago\" } }"
  },
  "docs/ex/datetime-ex/totimestring.html": {
    "href": "docs/ex/datetime-ex/totimestring.html",
    "title": "ToTimeString() | Snipster",
    "summary": "Description Formats a DateTime as a time string of HH:mm:ss. Method Signature string ToTimeString(this DateTime date) Examples using Snipster.Library.Extensions; public class Example { public static void Main() { var date = new DateTime(2023, 10, 1, 15, 30, 45); string result = date.ToTimeString(); // result -> \"15:30:45\" } }"
  },
  "docs/ex/datetime-ex/totimezone.html": {
    "href": "docs/ex/datetime-ex/totimezone.html",
    "title": "ToTimeZone() | Snipster",
    "summary": "Description Converts the specified DateTime to the specified time zone. Method Signature DateTime ToTimeZone(this DateTime date, string timeZoneId) Examples using Snipster.Library.Extensions; public class Example { public static void Main() { var utcDate = new DateTime(2023, 10, 1, 12, 0, 0, DateTimeKind.Utc); var pacificDate = utcDate.ToTimeZone(\"Pacific Standard Time\"); // pacificDate -> 10/1/2023 5:00:00 AM } }"
  },
  "docs/ex/datetime-ex/tounixtimestamp.html": {
    "href": "docs/ex/datetime-ex/tounixtimestamp.html",
    "title": "ToUnixTimestamp() | Snipster",
    "summary": "Description Converts a DateTime to a Unix timestamp (seconds since Unix epoch: 1970-01-01T00:00:00Z). Method Signature long ToUnixTimestamp(this DateTime date) Examples using Snipster.Library.Extensions; public class Example { public static void Main() { var date = new DateTime(2021, 1, 1, 0, 0, 0, DateTimeKind.Utc); long timestamp = date.ToUnixTimestamp(); // timestamp -> 1609459200 } }"
  },
  "docs/ex/json-ex/fromjson.html": {
    "href": "docs/ex/json-ex/fromjson.html",
    "title": "FromJson<T>() | Snipster",
    "summary": "Description De-serializes a JSON string to an object of type T. Method Signature T? FromJson<T>(this string json) Examples using Snipster.Library.Extensions; public class Example { public static void Main() { string json = \"{\\\"Name\\\":\\\"Test\\\",\\\"Value\\\":123}\"; var obj = json.FromJson<TestObject>(); // obj.Name -> \"Test\" // obj.Value -> 123 string invalidJson = \"{InvalidJson}\"; var obj = invalidJson.FromJson<dynamic>(); // Output: null } }"
  },
  "docs/ex/json-ex/tojson.html": {
    "href": "docs/ex/json-ex/tojson.html",
    "title": "ToJson() | Snipster",
    "summary": "Description Serializes the specified object to a JSON string. Method Signature string ToJson(this object obj, Formatting formatting = Formatting.None) Examples using Snipster.Library.Extensions; public class Example { public static void Main() { var obj = new { Name = \"Test\", Value = 123 }; string json = obj.ToJson(); // Output: {\"Name\":\"Test\",\"Value\":123} } }"
  },
  "docs/ex/number-ex/todoublesafe.html": {
    "href": "docs/ex/number-ex/todoublesafe.html",
    "title": "ToDoubleSafe() | Snipster",
    "summary": "Description Converts string to a double safely, returns default if invalid. e.g. \"123.45\" becomes 123.45, \"abc\" becomes 0. Method Signature double ToDoubleSafe(this string input, double defaultValue = 0) Examples using Snipster.Library.Extensions; public class Example { public static void Main() { string input = \"123.45\"; double result = input.ToDoubleSafe(); // Output: 123.45 string invalid = \"xyz\"; double safeResult = invalid.ToDoubleSafe(-1); // Output: -1 } }"
  },
  "docs/ex/number-ex/tointsafe.html": {
    "href": "docs/ex/number-ex/tointsafe.html",
    "title": "ToIntSafe() | Snipster",
    "summary": "Description Converts string to an integer safely, returns default if invalid. e.g. \"123\" becomes 123, \"abc\" becomes 0. Method Signature int ToIntSafe(this string input, int defaultValue = 0) Examples using Snipster.Library.Extensions; public class Example { public static void Main() { string input = \"123\"; int result = input.ToIntSafe(); // Output: 123 string invalid = \"abc\"; int safeResult = invalid.ToIntSafe(0); // Output: 0 } }"
  },
  "docs/ex/number-ex/toordinal.html": {
    "href": "docs/ex/number-ex/toordinal.html",
    "title": "ToOrdinal() | Snipster",
    "summary": "Description Converts a number to its ordinal representation as a string. e.g. \"1st\", \"2nd\", \"3rd\", \"4th\", etc. Method Signature string ToOrdinal(this int number) Examples using Snipster.Library.Extensions; public class Example { public static void Main() { int num1 = 1; string result1 = num1.ToOrdinal(); // Output: \"1st\" int num2 = 10; string result2 = num2.ToOrdinal(); // Output: \"10th\" } }"
  },
  "docs/ex/object-ex/getpropertyvalue.html": {
    "href": "docs/ex/object-ex/getpropertyvalue.html",
    "title": "GetPropertyValue() | Snipster",
    "summary": "Description Gets the value of a public instance property by name. Method Signature object? GetPropertyValue(this object obj, string propertyName) Examples using Snipster.Library.Extensions; public class Example { // Test classes public class Person { public string Name { get; set; } = string.Empty; public int Age { get; set; } public string? Nickname { get; } = \"ReadOnly\"; public Address? Address { get; set; } public Status UserStatus { get; set; } } public class Address { public string City { get; set; } = string.Empty; } public enum Status { Active, Inactive } public static void Main() { // 1. Throws when object is null object obj = null!; _ = obj.GetPropertyValue(\"Name\"); // Throws ArgumentNullException // 2. Throws when property name is empty var person = new Person(); _ = person.GetPropertyValue(\"\"); // Throws ArgumentException // 3. Returns property value var person = new Person { Name = \"John\" }; var value = person.GetPropertyValue(\"Name\"); // Output: \"John\" // 4. Returns null for nullable property var person = new Person { Address = null }; var value = person.GetPropertyValue(\"Address\"); // Output: null // 5. Throws when property doesn’t exist var person = new Person { Name = \"John\" }; _ = person.GetPropertyValue(\"InvalidProp\"); // Throws InvalidOperationException // 6 .Returns object instance for complex type var person = new Person { Address = new Address { City = \"Colombo\" } }; var value = person.GetPropertyValue(\"Address\"); // Output: Address { City = \"Colombo\" } // 7. Returns null for null complex property var person = new Person { Address = null }; var value = person.GetPropertyValue(\"Address\"); // Output: null // 8. Case sensitivity check var person = new Person { Name = \"John\" }; _ = person.GetPropertyValue(\"name\"); // Throws InvalidOperationException — property names are case-sensitive } }"
  },
  "docs/ex/object-ex/setpropertyvalue.html": {
    "href": "docs/ex/object-ex/setpropertyvalue.html",
    "title": "SetPropertyValue() | Snipster",
    "summary": "Description Sets the value of a public instance property by name, if it exists and is writable. Method Signature void SetPropertyValue(this object obj, string propertyName, object? value) Examples using Snipster.Library.Extensions; public class Example { // Test classes public class Person { public string Name { get; set; } = string.Empty; public int Age { get; set; } public string? Nickname { get; } = \"ReadOnly\"; public Address? Address { get; set; } public Status UserStatus { get; set; } } public class Address { public string City { get; set; } = string.Empty; } public enum Status { Active, Inactive } public static void Main() { // 1. Throws when object is null object obj = null!; obj.SetPropertyValue(\"Name\", \"John\"); // Throws ArgumentNullException // 2. Throws when property name is empty var person = new Person(); person.SetPropertyValue(\"\", \"John\"); // Throws ArgumentException // 3. Throws when property doesn’t exist var person = new Person(); person.SetPropertyValue(\"InvalidProp\", \"X\"); // Throws InvalidOperationException // 4. Throws when property is read-only var person = new Person(); person.SetPropertyValue(\"Nickname\", \"Sam\"); // Throws InvalidOperationException // 5. Sets value when property exists var person = new Person(); person.SetPropertyValue(\"Name\", \"Jane\"); // person.Name == \"Jane\" // 6. Sets null for nullable property var person = new Person { Address = new Address() }; person.SetPropertyValue(\"Address\", null); // person.Address == null // 7. Converts type automatically var person = new Person(); person.SetPropertyValue(\"Age\", \"42\"); // person.Age == 42 // 8. Sets complex object property var person = new Person(); var addr = new Address { City = \"Thanamalwila\" }; person.SetPropertyValue(\"Address\", addr); // person.Address.City == \"Thanamalwila\" // 9. Sets enum property from string var person = new Person(); person.SetPropertyValue(\"UserStatus\", \"Active\"); // person.UserStatus == Status.Active // 10. Sets enum property from enum value var person = new Person(); person.SetPropertyValue(\"UserStatus\", Status.Inactive); // person.UserStatus == Status.Inactive } }"
  },
  "docs/ex/security-ex/tosha256.html": {
    "href": "docs/ex/security-ex/tosha256.html",
    "title": "ToSha256() | Snipster",
    "summary": "Description Generates a SHA256 hash from a string. Useful for creating unique identifiers or checksums. Method Signature string ToSha256(this string input) Examples using Snipster.Library.Extensions; public class Example { public static void Main() { string input = \"Hello, World!\"; string hash = input.ToSha256(); Console.WriteLine(hash); // Output: dffd6021bb2bd5b0af676290809ec3a53191dd81c7f70a4b28688a362182986f } }"
  },
  "docs/ex/string-ex/capitalizefirst.html": {
    "href": "docs/ex/string-ex/capitalizefirst.html",
    "title": "CapitalizeFirst() | Snipster",
    "summary": "Description Capitalizes the first character of the string, leaving the rest unchanged. Method Signature string CapitalizeFirst(this string input) Examples using Snipster.Library.Extensions; public class Example { public static void Main() { \"hello\".CapitalizeFirst(); // Output: \"Hello\" } }"
  },
  "docs/ex/string-ex/frombase64.html": {
    "href": "docs/ex/string-ex/frombase64.html",
    "title": "FromBase64() | Snipster",
    "summary": "Description Decodes a Base64-encoded string. Method Signature string FromBase64(this string base64) Examples using Snipster.Library.Extensions; public class Example { public static void Main() { \"SGVsbG8gd29ybGQgZnJvbSBtZQ==\".FromBase64(); // Output: \"Hello world from me\" } }"
  },
  "docs/ex/string-ex/getdescription.html": {
    "href": "docs/ex/string-ex/getdescription.html",
    "title": "GetDescription() | Snipster",
    "summary": "Description Retrieves the value of the applied to an enum value. If no description is found, it returns the enum's name as a fallback. Method Signature string GetDescription(this Enum value) Examples // Test enum class public enum Status { [Description(\"Operation successful\")] Success, Pending } using Snipster.Library.Extensions; public class Example { public static void Main() { Status.Success.GetDescription(); // \"Operation successful\" Status.Pending.GetDescription(); // \"Pending\" } }"
  },
  "docs/ex/string-ex/normalizespaces.html": {
    "href": "docs/ex/string-ex/normalizespaces.html",
    "title": "NormalizeSpaces() | Snipster",
    "summary": "Description Normalizes spaces — trims and replaces multiple spaces with a single space. e.g. \" Hello World \" becomes \"Hello World\". Method Signature string NormalizeSpaces(this string input) Examples using Snipster.Library.Extensions; public class Example { public static void Main() { \" Hello World \".NormalizeSpaces(); // Output: \"Hello World\" } }"
  },
  "docs/ex/string-ex/onlydigits.html": {
    "href": "docs/ex/string-ex/onlydigits.html",
    "title": "OnlyDigits() | Snipster",
    "summary": "Description Removes all non-numeric characters. Method Signature string OnlyDigits(this string input) Examples using Snipster.Library.Extensions; public class Example { public static void Main() { \"123@abc\".OnlyDigits(); // Output: \"123\" } }"
  },
  "docs/ex/string-ex/ordefault.html": {
    "href": "docs/ex/string-ex/ordefault.html",
    "title": "OrDefault() | Snipster",
    "summary": "Description Returns a default value if string is null or empty. Method Signature string? OrDefault(this string? input, string defaultValue) Examples using Snipster.Library.Extensions; public class Example { public static void Main() { string? input = null; input.OrDefault(\"Default Value\"); // Output: \"Default Value\" } }"
  },
  "docs/ex/string-ex/removespecialcharacters.html": {
    "href": "docs/ex/string-ex/removespecialcharacters.html",
    "title": "RemoveSpecialCharacters() | Snipster",
    "summary": "Description Removes all special characters except spaces. Method Signature string RemoveSpecialCharacters(this string input) Examples using Snipster.Library.Extensions; public class Example { public static void Main() { \"Hello@123! World\".RemoveSpecialCharacters(); // Output: \"Hello123 World\" } }"
  },
  "docs/ex/string-ex/removewhitespace.html": {
    "href": "docs/ex/string-ex/removewhitespace.html",
    "title": "RemoveWhitespace() | Snipster",
    "summary": "Description Removes all whitespace (spaces, tabs, newlines) from the string. Method Signature string RemoveWhitespace(this string input) Examples using Snipster.Library.Extensions; public class Example { public static void Main() { \"Hello World\".RemoveWhitespace(); // Output: \"HelloWorld\" } }"
  },
  "docs/ex/string-ex/sanitizealphanumeric.html": {
    "href": "docs/ex/string-ex/sanitizealphanumeric.html",
    "title": "SanitizeAlphanumeric() | Snipster",
    "summary": "Description Removes all non-alphanumeric characters from a string. Method Signature string SanitizeAlphanumeric(this string input) Examples using Snipster.Library.Extensions; public class Example { public static void Main() { \"Hello@123!\".SanitizeAlphanumeric(); // Output: \"Hello123\" } }"
  },
  "docs/ex/string-ex/slugify.html": {
    "href": "docs/ex/string-ex/slugify.html",
    "title": "Slugify() | Snipster",
    "summary": "Description Slugifies a string (e.g. \"Hello World!\" -> \"hello-world\"). Method Signature string Slugify(this string input) Examples using Snipster.Library.Extensions; public class Example { public static void Main() { \"Hello world from me\".Slugify(); // Output: \"hello-world-from-me\" } }"
  },
  "docs/ex/string-ex/striphtmltags.html": {
    "href": "docs/ex/string-ex/striphtmltags.html",
    "title": "StripHtmlTags() | Snipster",
    "summary": "Description Removes HTML tags from the string. Method Signature string StripHtmlTags(this string input) Examples using Snipster.Library.Extensions; public class Example { public static void Main() { \"<p>Hello <strong>world</strong> from me</p>\".StripHtmlTags(); // Output: \"Hello world from me\" } }"
  },
  "docs/ex/string-ex/tobase64.html": {
    "href": "docs/ex/string-ex/tobase64.html",
    "title": "ToBase64() | Snipster",
    "summary": "Description Converts a string to Base64. Method Signature string ToBase64(this string input) Examples using Snipster.Library.Extensions; public class Example { public static void Main() { \"Hello world from me\".ToBase64(); // Output: \"SGVsbG8gd29ybGQgZnJvbSBtZQ==\" } }"
  },
  "docs/ex/string-ex/tocamelcase.html": {
    "href": "docs/ex/string-ex/tocamelcase.html",
    "title": "ToCamelCase() | Snipster",
    "summary": "Description Converts a string to CamelCase format. e.g. \"hello world\" becomes \"helloWorld\". Method Signature string ToCamelCase(this string input) Examples using Snipster.Library.Extensions; public class Example { public static void Main() { \"hello world\".ToCamelCase(); // Output: \"helloWorld\" } }"
  },
  "docs/ex/string-ex/tocleanquerystring.html": {
    "href": "docs/ex/string-ex/tocleanquerystring.html",
    "title": "ToCleanQueryString() | Snipster",
    "summary": "Description Cleans a SQL query string by removing any zero-width characters and BOM. Method Signature string ToCleanQueryString(this string sql) Examples using Snipster.Library.Extensions; public class Example { public static void Main() { // SQL query with BOM at the start \"\\uFEFFSELECT * FROM Customers WHERE Id = 1\".ToCleanQueryString(); // Output: \"SELECT * FROM Customers WHERE Id = 1\" } }"
  },
  "docs/ex/string-ex/tokebabcase.html": {
    "href": "docs/ex/string-ex/tokebabcase.html",
    "title": "ToKebabCase() | Snipster",
    "summary": "Description Converts a string to kebab-case. e.g. \"Hello World\" becomes \"hello-world\". Method Signature string ToKebabCase(this string input) Examples using Snipster.Library.Extensions; public class Example { public static void Main() { \"Hello World\".ToKebabCase(); // Output: \"hello-world\" } }"
  },
  "docs/ex/string-ex/topascalcase.html": {
    "href": "docs/ex/string-ex/topascalcase.html",
    "title": "ToPascalCase() | Snipster",
    "summary": "Description Converts a string to PascalCase. e.g. \"hello world\" becomes \"HelloWorld\". Method Signature string ToPascalCase(this string input) Examples using Snipster.Library.Extensions; public class Example { public static void Main() { \"hello world\".ToPascalCase(); // Output: \"HelloWorld\" } }"
  },
  "docs/ex/string-ex/totitlecase.html": {
    "href": "docs/ex/string-ex/totitlecase.html",
    "title": "ToTitleCase() | Snipster",
    "summary": "Description Converts string to Title Case. e.g. \"hello world\" becomes \"Hello World\". Method Signature string ToTitleCase(this string input) Examples using Snipster.Library.Extensions; public class Example { public static void Main() { \"hello world\".ToTitleCase(); // Output: \"Hello World\" } }"
  },
  "docs/ex/string-ex/truncate.html": {
    "href": "docs/ex/string-ex/truncate.html",
    "title": "Truncate() | Snipster",
    "summary": "Description Truncates the string to a specified maximum length and optionally appends a suffix (e.g. \"...\"). Method Signature string Truncate(this string input, int maxLength, string suffix = \"...\") Examples using Snipster.Library.Extensions; public class Example { public static void Main() { \"Hello world from me\".Truncate(10); // Output: \"Hello worl...\" } }"
  },
  "docs/gen-repo/addasync.html": {
    "href": "docs/gen-repo/addasync.html",
    "title": "AddAsync() | Snipster",
    "summary": "Description Adds a new entity to the database. Method Signature Task AddAsync(TEntity entity) Examples using Snipster.Library.Repository; namespace Test.Services { /// <summary> /// Demonstrates usage of <see cref=\"IGenericRepository\"/> within a service class. /// </summary> public class TestService { private readonly IGenericRepository<TestObject> _repository; /// <summary> /// Initializes a new instance of the <see cref=\"TestService\"/> class. /// </summary> /// <param name=\"repository\">The generic repository for data access.</param> public TestService(IGenericRepository<TestObject> repository) { _repository = repository; } /// <summary> /// Adds a new <see cref=\"TestObject\"/> to the database. /// </summary> /// <param name=\"entity\">The <see cref=\"TestObject\"/> entity to add.</param> /// <returns> /// The created entity. /// </returns> /// <exception cref=\"ArgumentNullException\"> /// Thrown when the entity is null. /// </exception> public async Task<TestObject> AddAsync(TestObject entity) { if (entity == null) throw new ArgumentNullException(nameof(entity)); await _repository.AddAsync(entity); await _repository.SaveChangesAsync(); return entity; } } }"
  },
  "docs/gen-repo/addrangeasync.html": {
    "href": "docs/gen-repo/addrangeasync.html",
    "title": "AddRangeAsync() | Snipster",
    "summary": "Description Adds multiple entities to the database. Method Signature Task AddRangeAsync(IEnumerable<TEntity> entities) Examples using Snipster.Library.Repository; namespace Test.Services { /// <summary> /// Demonstrates usage of <see cref=\"IGenericRepository\"/> within a service class. /// </summary> public class TestService { private readonly IGenericRepository<TestObject> _repository; /// <summary> /// Initializes a new instance of the <see cref=\"TestService\"/> class. /// </summary> /// <param name=\"repository\">The generic repository for data access.</param> public TestService(IGenericRepository<TestObject> repository) { _repository = repository; } /// <summary> /// Adds a collection of <see cref=\"TestObject\"/> entities to the database. /// </summary> /// <param name=\"entities\">The collection of <see cref=\"TestObject\"/> entities to add.</param> /// <returns> /// The collection of added <see cref=\"TestObject\"/> instances after persistence. /// </returns> /// <exception cref=\"ArgumentNullException\"> /// Thrown when the <paramref name=\"entities\"/> parameter is null or empty. /// </exception> public async Task<IEnumerable<TestObject>> AddRangeAsync(IEnumerable<TestObject> entities) { if (entities == null || !entities.Any()) throw new ArgumentNullException(nameof(entities), \"Entities collection cannot be null or empty.\"); await _repository.AddRangeAsync(entities); await _repository.SaveChangesAsync(); return entities; } } }"
  },
  "docs/gen-repo/getallasync.html": {
    "href": "docs/gen-repo/getallasync.html",
    "title": "GetAllAsync() | Snipster",
    "summary": "Description Retrieves all entities with optional eager loading. Method Signature Task<IEnumerable<TEntity>> GetAllAsync(Func<IQueryable<TEntity>, IQueryable<TEntity>>? include = null) Examples using Snipster.Library.Repository; namespace Test.Services { /// <summary> /// Demonstrates usage of <see cref=\"IGenericRepository\"/> within a service class. /// </summary> public class TestService { private readonly IGenericRepository<TestObject> _repository; /// <summary> /// Initializes a new instance of the <see cref=\"TestService\"/> class. /// </summary> /// <param name=\"repository\">The generic repository for data access.</param> public TestService(IGenericRepository<TestObject> repository) { _repository = repository; } /// <summary> /// Retrieves and prints all <see cref=\"TEntity\"/> instances from the database. /// </summary> public async Task GetAllAsync() { var allItems = await _repository.GetAllAsync(); foreach (var item in allItems) Console.WriteLine($\"{item.Id} - {item.Name}\"); } } }"
  },
  "docs/gen-repo/getallbyconditionasync.html": {
    "href": "docs/gen-repo/getallbyconditionasync.html",
    "title": "GetAllByConditionAsync() | Snipster",
    "summary": "Description Retrieves all entities matching a condition, with optional eager loading. Method Signature Task<IEnumerable<TEntity>> GetAllByConditionAsync(Expression<Func<TEntity, bool>> predicate, Func<IQueryable<TEntity>, IQueryable<TEntity>>? include = null) Examples using Snipster.Library.Repository; namespace Test.Services { /// <summary> /// Demonstrates usage of <see cref=\"IGenericRepository\"/> within a service class. /// </summary> public class TestService { private readonly IGenericRepository<TestObject> _repository; /// <summary> /// Initializes a new instance of the <see cref=\"TestService\"/> class. /// </summary> /// <param name=\"repository\">The generic repository for data access.</param> public TestService(IGenericRepository<TestObject> repository) { _repository = repository; } /// <summary> /// Retrieves all <see cref=\"TEntity\"/> instances from the database that satisfy a specific condition /// and prints them to the console. /// </summary> public async Task GetAllByConditionAsync() { var filtered = await _repository.GetAllByConditionAsync(x => x.Value > 50); if (filtered == null || !filtered.Any()) { Console.WriteLine(\"No matching records found.\"); return; } foreach (var item in filtered) Console.WriteLine($\"{item.Id} - {item.Name} - {item.Value}\"); } } }"
  },
  "docs/gen-repo/getbyconditionasync.html": {
    "href": "docs/gen-repo/getbyconditionasync.html",
    "title": "GetByConditionAsync() | Snipster",
    "summary": "Description Retrieves the first entity matching a condition, with optional eager loading. Method Signature Task<TEntity?> GetByConditionAsync(Expression<Func<TEntity, bool>> predicate, Func<IQueryable<TEntity>, IQueryable<TEntity>>? include = null) Examples using Snipster.Library.Repository; namespace Test.Services { /// <summary> /// Demonstrates usage of <see cref=\"IGenericRepository\"/> within a service class. /// </summary> public class TestService { private readonly IGenericRepository<TestObject> _repository; /// <summary> /// Initializes a new instance of the <see cref=\"TestService\"/> class. /// </summary> /// <param name=\"repository\">The generic repository for data access.</param> public TestService(IGenericRepository<TestObject> repository) { _repository = repository; } /// <summary> /// Retrieves a single <see cref=\"TEntity\"/> instance from the database that satisfies a specific condition /// and prints its details to the console. /// </summary> public async Task GetByConditionAsync() { var entity = await _repository.GetByConditionAsync(x => x.Name == \"Test\"); if (entity != null) Console.WriteLine($\"{entity.Id} - {entity.Name} - {entity.Value}\"); else Console.WriteLine(\"No matching record found.\"); } } }"
  },
  "docs/gen-repo/getselectedcolumnsasync.html": {
    "href": "docs/gen-repo/getselectedcolumnsasync.html",
    "title": "GetSelectedColumnsAsync() | Snipster",
    "summary": "Description Projects a selection of fields from entities. Method Signature Task<IEnumerable<TResult>> GetSelectedColumnsAsync<TResult>(Expression<Func<TEntity, TResult>> selector) Examples using Snipster.Library.Repository; namespace Test.Services { /// <summary> /// Demonstrates usage of <see cref=\"IGenericRepository\"/> within a service class. /// </summary> public class TestService { private readonly IGenericRepository<TestObject> _repository; /// <summary> /// Initializes a new instance of the <see cref=\"TestService\"/> class. /// </summary> /// <param name=\"repository\">The generic repository for data access.</param> public TestService(IGenericRepository<TestObject> repository) { _repository = repository; } /// <summary> /// Retrieves specific columns from all <see cref=\"TEntity\"/> instances in the database /// and prints the selected data to the console. /// </summary> public async Task GetSelectedColumnsAsync() { var projections = await _repository.GetSelectedColumnsAsync(x => new { x.Name, x.Value }); foreach (var item in projections) Console.WriteLine($\"{item.Name}: {item.Value}\"); } } }"
  },
  "docs/gen-repo/isexistasync.html": {
    "href": "docs/gen-repo/isexistasync.html",
    "title": "IsExistAsync() | Snipster",
    "summary": "Description Determines if any entity exists that matches a condition. Method Signature Task<bool> IsExistAsync(Expression<Func<TEntity, bool>> predicate) Examples using Snipster.Library.Repository; namespace Test.Services { /// <summary> /// Demonstrates usage of <see cref=\"IGenericRepository\"/> within a service class. /// </summary> public class TestService { private readonly IGenericRepository<TestObject> _repository; /// <summary> /// Initializes a new instance of the <see cref=\"TestService\"/> class. /// </summary> /// <param name=\"repository\">The generic repository for data access.</param> public TestService(IGenericRepository<TestObject> repository) { _repository = repository; } /// <summary> /// Checks whether any <see cref=\"TEntity\"/> instance in the database satisfies a specific condition /// and prints the result to the console. /// </summary> public async Task IsExistAsync() { bool exists = await _repository.IsExistAsync(x => x.Name == \"Test\"); Console.WriteLine(exists ? \"Entity exists\" : \"Entity not found\"); } } }"
  },
  "docs/gen-repo/remove.html": {
    "href": "docs/gen-repo/remove.html",
    "title": "Remove() | Snipster",
    "summary": "Description Removes an entity from the database. Method Signature void Remove(TEntity entity) Examples using Snipster.Library.Repository; namespace Test.Services { /// <summary> /// Demonstrates usage of <see cref=\"IGenericRepository\"/> within a service class. /// </summary> public class TestService { private readonly IGenericRepository<TestObject> _repository; /// <summary> /// Initializes a new instance of the <see cref=\"TestService\"/> class. /// </summary> /// <param name=\"repository\">The generic repository for data access.</param> public TestService(IGenericRepository<TestObject> repository) { _repository = repository; } /// <summary> /// Removes an existing <see cref=\"TEntity\"/> instance from the database. /// </summary> /// <param name=\"entity\">The <see cref=\"TEntity\"/> instance to remove.</param> /// <exception cref=\"ArgumentNullException\"> /// Thrown when the <paramref name=\"entity\"/> parameter is null. /// </exception> public async Task RemoveAsync(TEntity entity) { if (entity == null) throw new ArgumentNullException(nameof(entity), \"Entity cannot be null.\"); var existingEntity = await _repository.GetByConditionAsync(x => x.Id == 1); if (existingEntity != null) { _repository.Remove(existingEntity); await _context.SaveChangesAsync(); } } } }"
  },
  "docs/gen-repo/removeasync.html": {
    "href": "docs/gen-repo/removeasync.html",
    "title": "RemoveAsync() | Snipster",
    "summary": "Description Removes an entity by its identifier. Method Signature Task RemoveAsync(object id) Examples using Snipster.Library.Repository; namespace Test.Services { /// <summary> /// Demonstrates usage of <see cref=\"IGenericRepository\"/> within a service class. /// </summary> public class TestService { private readonly IGenericRepository<TestObject> _repository; /// <summary> /// Initializes a new instance of the <see cref=\"TestService\"/> class. /// </summary> /// <param name=\"repository\">The generic repository for data access.</param> public TestService(IGenericRepository<TestObject> repository) { _repository = repository; } /// <summary> /// Removes an existing <see cref=\"TEntity\"/> instance from the database by its identifier. /// </summary> /// <param name=\"id\">The unique identifier of the entity to remove.</param> /// <exception cref=\"ArgumentNullException\"> /// Thrown when the <paramref name=\"id\"/> parameter is null. /// </exception> public async Task RemoveAsync(object id) { if (id == null) throw new ArgumentNullException(nameof(id), \"Id cannot be null.\"); await _repository.RemoveAsync(id); await _context.SaveChangesAsync(); } } }"
  },
  "docs/gen-repo/setup.html": {
    "href": "docs/gen-repo/setup.html",
    "title": "Setup | Snipster",
    "summary": "Registering the Generic Repository in Dependency Injection To make the GenericRepository<T> available throughout your application, register it inside the Program.cs (or Startup.cs for older projects). 1. Add Interface and Implementation to DI Container // Program.cs using Microsoft.EntityFrameworkCore; using Snipster.Library.Repository; var builder = WebApplication.CreateBuilder(args); // Register your DbContext builder.Services.AddDbContext<AppDbContext>(options => options.UseSqlServer(builder.Configuration.GetConnectionString(\"DefaultConnection\"))); // Register the generic repository builder.Services.AddScoped(typeof(IGenericRepository<>), typeof(GenericRepository<>)); var app = builder.Build(); app.Run(); 2. Inject and Use in Services or Controllers You can now inject the repository wherever needed. The repository is automatically injected and ready to use with your entities. using Snipster.Library.Repository; public class TestService { private readonly IGenericRepository<TestObject> _repository; public TestService(IGenericRepository<TestObject> repository) { _repository = repository; } public async Task<IEnumerable<TestObject>> GetAllAsync() { return await _repository.GetAllAsync(); } } Implementing IGenericRepository The interface defines all reusable CRUD and query operations for entities. using Snipster.Library.Repository; public class MyRepository<TEntity> : IGenericRepository<TEntity> where TEntity : class { private readonly DbContext _context; private readonly DbSet<TEntity> _dbSet; public MyRepository(DbContext context) { _context = context; _dbSet = context.Set<TEntity>(); } public async Task AddAsync(TEntity entity) { await _dbSet.AddAsync(entity); } ... }"
  },
  "docs/gen-repo/update.html": {
    "href": "docs/gen-repo/update.html",
    "title": "Update() | Snipster",
    "summary": "Description Updates an existing entity. Method Signature void Update(TEntity entity) Examples using Snipster.Library.Repository; namespace Test.Services { /// <summary> /// Demonstrates usage of <see cref=\"IGenericRepository\"/> within a service class. /// </summary> public class TestService { private readonly IGenericRepository<TestObject> _repository; /// <summary> /// Initializes a new instance of the <see cref=\"TestService\"/> class. /// </summary> /// <param name=\"repository\">The generic repository for data access.</param> public TestService(IGenericRepository<TestObject> repository) { _repository = repository; } /// <summary> /// Updates an existing <see cref=\"TEntity\"/> in the database. /// </summary> /// <param name=\"entity\">The <see cref=\"TEntity\"/> instance to update.</param> /// <exception cref=\"ArgumentNullException\"> /// Thrown when the <paramref name=\"entity\"/> parameter is null. /// </exception> public async Task UpdateAsync(TEntity entity) { if (entity == null) throw new ArgumentNullException(nameof(entity), \"Entity cannot be null.\"); _repository.Update(entity); await _repository.SaveChangesAsync(); } } }"
  },
  "docs/gen-repo/updaterange.html": {
    "href": "docs/gen-repo/updaterange.html",
    "title": "UpdateRange() | Snipster",
    "summary": "Description Updates multiple entities. Method Signature void UpdateRange(IEnumerable<TEntity> entities) Examples using Snipster.Library.Repository; namespace Test.Services { /// <summary> /// Demonstrates usage of <see cref=\"IGenericRepository\"/> within a service class. /// </summary> public class TestService { private readonly IGenericRepository<TestObject> _repository; /// <summary> /// Initializes a new instance of the <see cref=\"TestService\"/> class. /// </summary> /// <param name=\"repository\">The generic repository for data access.</param> public TestService(IGenericRepository<TestObject> repository) { _repository = repository; } /// <summary> /// Updates a collection of <see cref=\"TEntity\"/> instances in the database. /// </summary> /// <param name=\"entities\">The collection of <see cref=\"TEntity\"/> instances to update.</param> /// <exception cref=\"ArgumentNullException\"> /// Thrown when the <paramref name=\"entities\"/> parameter is null or empty. /// </exception> public async Task UpdateRangeAsync(IEnumerable<TEntity> entities) { if (entities == null || !entities.Any()) throw new ArgumentNullException(nameof(entities), \"Entities collection cannot be null or empty.\"); _repository.UpdateRange(entities); await _repository.SaveChangesAsync(); } } }"
  },
  "docs/help-fx/excel-fx/writetoexcel.html": {
    "href": "docs/help-fx/excel-fx/writetoexcel.html",
    "title": "WriteToExcel<T>() | Snipster",
    "summary": "Description Exports a collection of data to an Excel file written to the provided memory stream, using the specified column definitions and export options. Method Signature void WriteToExcel<T>(IEnumerable<T> data, List<ExcelColumn> columns, string filePath, string fileName, Action<ExcelExportOptions>? configureOptions = null) Examples using Snipster.Library.Helpers; using Snipster.Library.Enums; public class Example { // Test class public class TestObject { public int Id { get; set; } public string? Name { get; set; } public int Value { get; set; } public int Age { get; set; } public bool IsMember { get; set; } public DateTime JoinDate { get; set; } public double Salary { get; set; } public double Commission { get; set; } } public static void Main() { // Test data list var data = new List<TestObject> { new TestObject { Id = 1, Name = \"Darshana\", Value = 1000, Age = 30, IsMember = true, JoinDate = new DateTime(2023, 01, 15), Salary = 5000.25, Commission = 0.075 }, new TestObject { Id = 2, Name = \"Nadeesha\", Value = 2500, Age = 27, IsMember = false, JoinDate = new DateTime(2024, 06, 05), Salary = 7250.50, Commission = 0.10 } }; // Column definitions var columns = new List<ExcelColumn> { new ExcelColumn { Name = \"Id\", DataType = typeof(int), HeaderText = \"ID\", Format = ExcelFormats.Integer, Width = 25, Alignment = ExcelAlignment.Left, HeaderAlignment = ExcelAlignment.Left }, new ExcelColumn { Name = \"Name\", DataType = typeof(string), HeaderText = \"Full Name\", Format = ExcelFormats.Text, Width = 25, Alignment = ExcelAlignment.Left, HeaderAlignment = ExcelAlignment.Left }, new ExcelColumn { Name = \"Value\", DataType = typeof(int), HeaderText = \"Value\", Format = ExcelFormats.Integer, Width = 25, Alignment = ExcelAlignment.Left, HeaderAlignment = ExcelAlignment.Left }, new ExcelColumn { Name = \"Age\", DataType = typeof(int), HeaderText = \"Age\", Format = ExcelFormats.Integer, Width = 25, Alignment = ExcelAlignment.Left, HeaderAlignment = ExcelAlignment.Left }, new ExcelColumn { Name = \"IsMember\", DataType = typeof(bool), HeaderText = \"Membership\", TrueText = \"Yes\", FalseText = \"No\", Width = 25, Alignment = ExcelAlignment.Left, HeaderAlignment = ExcelAlignment.Left }, new ExcelColumn { Name = \"JoinDate\", DataType = typeof(DateTime), HeaderText = \"Join Date\", Format = ExcelFormats.DateTime, Width = 25, Alignment = ExcelAlignment.Left, HeaderAlignment = ExcelAlignment.Left }, new ExcelColumn { Name = \"Salary\", DataType = typeof(double), HeaderText = \"Salary\", Format = ExcelFormats.Currency, Width = 25, Alignment = ExcelAlignment.Left, HeaderAlignment = ExcelAlignment.Left }, new ExcelColumn { Name = \"Commission\", DataType = typeof(double), HeaderText = \"Commission\", Format = ExcelFormats.Percent, Width = 25, Alignment = ExcelAlignment.Left, HeaderAlignment = ExcelAlignment.Left } }; // Export to disk ExcelFx.WriteToExcel(data, columns, \"C:\\\\Exports\", \"Employees.xlsx\", opts => { opts.AutoFitColumns = false; opts.FreezeHeader = true; opts.AlternateRowColors = true; opts.HeaderBackground = Color.LightGray; opts.AlternateRowColor = Color.LightYellow; opts.SheetName = \"Employee Report\"; }); // Output: A formatted Excel file at C:\\Exports\\Employees.xlsx with // frozen headers, header background colors, alternate row colors, and formatted columns. } }"
  },
  "docs/help-fx/excel-fx/writetomemory.html": {
    "href": "docs/help-fx/excel-fx/writetomemory.html",
    "title": "WriteToMemory<T>() | Snipster",
    "summary": "Description Exports a collection of data to a provided MemoryStream as an Excel file, using the specified column definitions and export options. Method Signature void WriteToMemory<T>(IEnumerable<T> data, List<ExcelColumn> columns, MemoryStream stream, Action<ExcelExportOptions>? configureOptions = null) Examples using Snipster.Library.Helpers; using Snipster.Library.Enums; public class Example { // Test class public class TestObject { public int Id { get; set; } public string? Name { get; set; } public int Value { get; set; } public int Age { get; set; } public bool IsMember { get; set; } public DateTime JoinDate { get; set; } public double Salary { get; set; } public double Commission { get; set; } } public static void Main() { // Memory stream var stream = new MemoryStream(); // Test data list var data = new List<TestObject> { new TestObject { Id = 1, Name = \"Darshana\", Value = 1000, Age = 30, IsMember = true, JoinDate = new DateTime(2023, 01, 15), Salary = 5000.25, Commission = 0.075 }, new TestObject { Id = 2, Name = \"Nadeesha\", Value = 2500, Age = 27, IsMember = false, JoinDate = new DateTime(2024, 06, 05), Salary = 7250.50, Commission = 0.10 } }; // Column definitions var columns = new List<ExcelColumn> { new ExcelColumn { Name = \"Id\", DataType = typeof(int), HeaderText = \"ID\", Format = ExcelFormats.Integer, Width = 25, Alignment = ExcelAlignment.Left, HeaderAlignment = ExcelAlignment.Left }, new ExcelColumn { Name = \"Name\", DataType = typeof(string), HeaderText = \"Full Name\", Format = ExcelFormats.Text, Width = 25, Alignment = ExcelAlignment.Left, HeaderAlignment = ExcelAlignment.Left }, new ExcelColumn { Name = \"Value\", DataType = typeof(int), HeaderText = \"Value\", Format = ExcelFormats.Integer, Width = 25, Alignment = ExcelAlignment.Left, HeaderAlignment = ExcelAlignment.Left }, new ExcelColumn { Name = \"Age\", DataType = typeof(int), HeaderText = \"Age\", Format = ExcelFormats.Integer, Width = 25, Alignment = ExcelAlignment.Left, HeaderAlignment = ExcelAlignment.Left }, new ExcelColumn { Name = \"IsMember\", DataType = typeof(bool), HeaderText = \"Membership\", TrueText = \"Yes\", FalseText = \"No\", Width = 25, Alignment = ExcelAlignment.Left, HeaderAlignment = ExcelAlignment.Left }, new ExcelColumn { Name = \"JoinDate\", DataType = typeof(DateTime), HeaderText = \"Join Date\", Format = ExcelFormats.DateTime, Width = 25, Alignment = ExcelAlignment.Left, HeaderAlignment = ExcelAlignment.Left }, new ExcelColumn { Name = \"Salary\", DataType = typeof(double), HeaderText = \"Salary\", Format = ExcelFormats.Currency, Width = 25, Alignment = ExcelAlignment.Left, HeaderAlignment = ExcelAlignment.Left }, new ExcelColumn { Name = \"Commission\", DataType = typeof(double), HeaderText = \"Commission\", Format = ExcelFormats.Percent, Width = 25, Alignment = ExcelAlignment.Left, HeaderAlignment = ExcelAlignment.Left } }; // Write to memory ExcelFx.WriteToMemory(data, columns, stream, opts => { opts.AutoFitColumns = false; opts.FreezeHeader = true; opts.AlternateRowColors = true; opts.HeaderBackground = Color.LightGray; opts.AlternateRowColor = Color.LightYellow; opts.SheetName = \"Employee Report\"; }); // Save file locally File.WriteAllBytes(\"Employees.xlsx\", stream.ToArray()); Console.WriteLine(\"Excel file generated: Employees.xlsx\"); } }"
  },
  "docs/help-fx/file-fx/createtempfile.html": {
    "href": "docs/help-fx/file-fx/createtempfile.html",
    "title": "CreateTempFile() | Snipster",
    "summary": "Description Creates a temporary file with a unique name in the system's temporary directory. Method Signature string? CreateTempFile(string extension = \".tmp\") Examples using Snipster.Library.Helpers; public class Example { public static void Main() { string tempLog = FileFx.CreateTempFile(\".log\"); Console.WriteLine($\"Temp file: {tempLog}\"); } }"
  },
  "docs/help-fx/file-fx/getdirectorysize.html": {
    "href": "docs/help-fx/file-fx/getdirectorysize.html",
    "title": "GetDirectorySize() | Snipster",
    "summary": "Description Calculates the total size of a directory, including all its subdirectories and files. Method Signature long GetDirectorySize(string path) Examples using Snipster.Library.Helpers; public class Example { public static void Main() { long size = FileFx.GetDirectorySize(\"C:\\\\Projects\\\\MyApp\"); Console.WriteLine($\"Directory size: {size} bytes.\"); } }"
  },
  "docs/help-fx/file-fx/safereadbytes.html": {
    "href": "docs/help-fx/file-fx/safereadbytes.html",
    "title": "SafeReadBytes() | Snipster",
    "summary": "Description Safely reads the content of a binary file as a byte array. Method Signature byte[]? SafeReadBytes(string path) Examples using Snipster.Library.Helpers; public class Example { public static void Main() { byte[]? bytes = FileFx.SafeReadBytes(\"C:\\\\temp\\\\data.bin\"); if (bytes != null) Console.WriteLine($\"File size: {bytes.Length} bytes.\"); } }"
  },
  "docs/help-fx/file-fx/safereadtext.html": {
    "href": "docs/help-fx/file-fx/safereadtext.html",
    "title": "SafeReadText() | Snipster",
    "summary": "Description Safely reads the content of a text file. Method Signature string? SafeReadText(string path, Encoding? encoding = null) Examples using Snipster.Library.Helpers; public class Example { public static void Main() { string? content = FileFx.SafeReadText(\"C:\\\\temp\\\\notes.txt\"); if (content is not null) Console.WriteLine(content); } }"
  },
  "docs/help-fx/file-fx/safewritebytes.html": {
    "href": "docs/help-fx/file-fx/safewritebytes.html",
    "title": "SafeWriteBytes() | Snipster",
    "summary": "Description Safely writes a byte array to a file, creating the file if it does not exist or overwriting it if it does. Method Signature bool SafeWriteBytes(string path, byte[] data) Examples using Snipster.Library.Helpers; public class Example { public static void Main() { var data = new byte[] { 1, 2, 3, 4 }; bool success = FileFx.SafeWriteBytes(\"C:\\\\temp\\\\data.bin\", data); if (success) Console.WriteLine(\"Bytes written successfully to C:\\\\temp\\\\data.bin.\"); } }"
  },
  "docs/help-fx/file-fx/safewritetext.html": {
    "href": "docs/help-fx/file-fx/safewritetext.html",
    "title": "SafeWriteText() | Snipster",
    "summary": "Description Safely writes text content to a file, creating the file if it does not exist or overwriting it if it does. Method Signature bool SafeWriteText(string path, string content, Encoding? encoding = null) Examples using Snipster.Library.Helpers; public class Example { public static void Main() { bool ok = FileFx.SafeWriteText(\"C:\\\\temp\\\\output.txt\", \"Hello, Utils!\"); if (ok) Console.WriteLine(\"File saved successfully.\"); } }"
  },
  "docs/help-fx/file-fx/sanitizefilename.html": {
    "href": "docs/help-fx/file-fx/sanitizefilename.html",
    "title": "SanitizeFileName() | Snipster",
    "summary": "Description Sanitizes a file name by replacing all invalid file name characters with a specified replacement string (default is underscore). Method Signature string? SanitizeFileName(string fileName, string replacement = \"_\") Examples using Snipster.Library.Helpers; public class Example { public static void Main() { string safe = FileFx.SanitizeFileName(\"my:file*name?.txt\"); // Result: \"my_file_name_.txt\" } }"
  },
  "docs/help-fx/json-fx/minify.html": {
    "href": "docs/help-fx/json-fx/minify.html",
    "title": "Minify() | Snipster",
    "summary": "Description Minifies a Json string (removes all whitespace and newlines). Method Signature string Minify(string json) Examples using Snipster.Library.Helpers; public class Example { public static void Main() { string json = \"{ \\\"name\\\": \\\"John\\\", \\\"age\\\": 30, \\\"city\\\": \\\"New York\\\" }\"; string minified = JsonFx.Minify(json); // Result: {\"name\":\"John\",\"age\":30,\"city\":\"New York\"} } }"
  },
  "docs/help-fx/json-fx/prettify.html": {
    "href": "docs/help-fx/json-fx/prettify.html",
    "title": "Prettify() | Snipster",
    "summary": "Description Prettifies a Json string (adds indentation and newlines for readability). Method Signature string Prettify(string json) Examples using Snipster.Library.Helpers; public class Example { public static void Main() { string json = \"{\\\"name\\\":\\\"John\\\",\\\"age\\\":30,\\\"city\\\":\\\"New York\\\"}\"; string pretty = JsonFx.Prettify(json); /* Result: { \"name\": \"John\", \"age\": 30, \"city\": \"New York\" } */ } }"
  },
  "docs/help-fx/network-fx/buildurl.html": {
    "href": "docs/help-fx/network-fx/buildurl.html",
    "title": "BuildUrl() | Snipster",
    "summary": "Description Builds a URL with query parameters from a base URL and a dictionary of parameters. Supports both single values and collections as parameter values. Method Signature string BuildUrl(string baseUrl, Dictionary<string, object?> parameters) Examples using Snipster.Library.Helpers; public class Example { public static void Main() { // 1. Basic Usage var url = NetworkFx.BuildUrl( \"https://www.google.com/search\", new Dictionary<string, object?> { [\"q\"] = \"books\", [\"page\"] = 2 } ); // Result: https://www.google.com/search?q=books&page=2 // 2. List Parameters var url = NetworkFx.BuildUrl( \"https://www.google.com/search\", new Dictionary<string, object?> { [\"tags\"] = new[] { \"csharp\", \"dotnet\", \"helpers\" } } ); // Result: https://www.google.com/search?tags=csharp&tags=dotnet&tags=helpers // 3. Special Characters var url = NetworkFx.BuildUrl( \"https://www.google.com/search\", new Dictionary<string, object?> { [\"q\"] = \"C# helpers & utils\" } ); // Result: https://www.google.com/search?q=C%23+helpers+%26+utils } }"
  },
  "docs/help-fx/network-fx/hasinternetconnectionasync.html": {
    "href": "docs/help-fx/network-fx/hasinternetconnectionasync.html",
    "title": "HasInternetConnectionAsync() | Snipster",
    "summary": "Description Checks if the system has an active internet connection by sending a lightweight request to a reliable host (default: https://www.google.com). Method Signature Task<bool> HasInternetConnectionAsync(string testUrl = \"http://www.google.com\", int timeoutSeconds = 5) Examples using Snipster.Library.Helpers; public class Example { public static void Main() { bool online = await NetworkFx.HasInternetConnectionAsync(); if (!online) Console.WriteLine(\"No internet connection detected.\"); } }"
  },
  "docs/help-fx/network-fx/ishostavailableasync.html": {
    "href": "docs/help-fx/network-fx/ishostavailableasync.html",
    "title": "IsHostAvailableAsync() | Snipster",
    "summary": "Description Checks if a host is available by sending a ping request. Method Signature Task<bool> IsHostAvailableAsync(string host, int timeout = 1000) Examples using Snipster.Library.Helpers; public class Example { public static void Main() { bool reachable = await NetworkFx.IsHostAvailableAsync(\"google.com\", 2000); Console.WriteLine(reachable ? \"Host reachable\" : \"Host unreachable\"); } }"
  },
  "docs/help-fx/object-fx/deepclone.html": {
    "href": "docs/help-fx/object-fx/deepclone.html",
    "title": "DeepClone<T>() | Snipster",
    "summary": "Description Creates a deep clone of the specified object using json serialization. Supports reference types, collections, anonymous types, and value types. Method Signature T DeepClone<T>(this T obj) Examples using Snipster.Library.Helpers; public class Example { // Test classes public class Address { public string City { get; set; } = string.Empty; public string Country { get; set; } = string.Empty; } public class Person { public string Name { get; set; } = string.Empty; public int Age { get; set; } public Address Address { get; set; } = new Address(); } public class Employee : Person { public string Department { get; set; } = string.Empty; } public class Circular { public Circular? Self { get; set; } } public static void Main() { // 1. Clone Simple Object var person = new Person { Name = \"John\", Age = 30 }; var clone = person.DeepClone(); Console.WriteLine(clone.Name); // John Console.WriteLine(ReferenceEquals(person, clone)); // False // 2. Clone Nested Object var person = new Person { Name = \"Jane\", Age = 25, Address = new Address { City = \"Colombo\", Country = \"Sri Lanka\" } }; var clone = person.DeepClone(); Console.WriteLine(clone.Address.City); // Colombo Console.WriteLine(ReferenceEquals(person.Address, clone.Address)); // False // 3. Clone Collection var list = new List<Person> { new Person { Name = \"A\", Age = 20 }, new Person { Name = \"B\", Age = 30 } }; var clone = list.DeepClone(); Console.WriteLine(clone[0].Name); // A Console.WriteLine(ReferenceEquals(list[0], clone[0])); // False // 4. Preserve Derived Types Person employee = new Employee { Name = \"Sam\", Age = 40, Department = \"IT\", Address = new Address { City = \"Kandy\", Country = \"Sri Lanka\" } }; var clone = employee.DeepClone(); Console.WriteLine(clone is Employee); // True Console.WriteLine(((Employee)clone).Department); // IT // 5. Handle Circular References var circular = new Circular(); circular.Self = circular; // Throws InvalidOperationException var clone = circular.DeepClone(); // 6. Clone Anonymous Objects var anon = new { Name = \"Anonymous\", Age = 99 }; var clone = anon.DeepClone(); Console.WriteLine(clone.Name); // Anonymous // 7. Clone Value and Nullable Types int? number = 123; var clone = number.DeepClone(); // 123 // 8. Clone a KeyValuePair (struct with value and reference types) var point = new KeyValuePair<int, string>(10, \"X\"); var clonedPoint = point.DeepClone(); Console.WriteLine($\"Cloned: [{clonedPoint.Key}, {clonedPoint.Value}]\"); // Output: Cloned: [10, X] } }"
  },
  "docs/help-fx/security-fx/generatesecuretoken.html": {
    "href": "docs/help-fx/security-fx/generatesecuretoken.html",
    "title": "GenerateSecureToken() | Snipster",
    "summary": "Description Generates a secure random token of specified length using cryptographic random number generation. Method Signature string GenerateSecureToken(int length = 32) Examples using Snipster.Library.Helpers; public class Example { public static void Main() { // Generate a 32-character secure random token string secureToken = SecurityFx.GenerateSecureToken(32); Console.WriteLine(secureToken); // Example Output: \"b3a41c2f5e8d9a1b7c4f0e2d1a6b3c5f\" } }"
  },
  "docs/help-fx/security-fx/passwordhash.html": {
    "href": "docs/help-fx/security-fx/passwordhash.html",
    "title": "PasswordHash() | Snipster",
    "summary": "Description Generates a hashed password and salt using HMACSHA256. Method Signature void PasswordHash(string password, out byte[] passwordHash, out byte[] passwordSalt) Examples using Snipster.Library.Helpers; public class Example { public static void Main() { // Hash a user password with salt string password = \"MySecurePassword123\"; SecurityFx.PasswordHash(password, out byte[] passwordHash, out byte[] passwordSalt); Console.WriteLine($\"Hash: {Convert.ToBase64String(passwordHash)}\"); Console.WriteLine($\"Salt: {Convert.ToBase64String(passwordSalt)}\"); // Example Output: // Hash: j0rxVgxxyA2u7M3p6qYH1o/4D6DfKj5Wx9lIuK9LZqU= // Salt: 7hK4tG0r6pJd3yE5xL1aOw== // Note: The actual hash and salt values will vary each time. } }"
  },
  "docs/help-fx/security-fx/randomstring.html": {
    "href": "docs/help-fx/security-fx/randomstring.html",
    "title": "RandomString() | Snipster",
    "summary": "Description Generates a random string of specified length using allowed characters. Method Signature string RandomString(int length = 32, string allowedChars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\") Examples using Snipster.Library.Helpers; public class Example { public static void Main() { // Generate a 16-character random string using letters and numbers string allowedChars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\"; string randomString = SecurityFx.RandomString(16, allowedChars); Console.WriteLine(randomString); // Example Output: \"hT9sZ2AbQwEfLp3X\" } }"
  },
  "docs/help-fx/security-fx/verifypassword.html": {
    "href": "docs/help-fx/security-fx/verifypassword.html",
    "title": "VerifyPassword() | Snipster",
    "summary": "Description Verifies if the provided password matches the stored password hash using the provided salt. Method Signature bool VerifyPassword(string password, byte[] passwordHash, byte[] passwordSalt) Examples using Snipster.Library.Helpers; public class Example { public static void Main() { // Verify a password against a stored hash and salt string password = \"MySecurePassword123\"; SecurityFx.PasswordHash(password, out byte[] hash, out byte[] salt); bool isValid = SecurityFx.VerifyPassword(password, hash, salt); Console.WriteLine(isValid); // Output: True } }"
  },
  "docs/help-fx/string-fx/formatbytes.html": {
    "href": "docs/help-fx/string-fx/formatbytes.html",
    "title": "FormatBytes() | Snipster",
    "summary": "Description Formats a byte size into a human-readable string (e.g. \"1.5 MB\", \"200 KB\"). Method Signature string FormatBytes(long bytes, int decimals = 2) Examples using Snipster.Library.Helpers; public class Example { public static void Main() { // Convert bytes into a human-readable string with 2 decimal places long bytes = 1_500_000; string result = StringFx.FormatBytes(bytes, 2); Console.WriteLine(result); // Output: \"1.43 MB\" // Negative byte values are handled as well string negative = StringFx.FormatBytes(-bytes, 2); Console.WriteLine(negative); // Output: \"-1.43 MB\" } }"
  },
  "docs/help-fx/string-fx/generateguid.html": {
    "href": "docs/help-fx/string-fx/generateguid.html",
    "title": "GenerateGuid() | Snipster",
    "summary": "Description Generates a new GUID as a string. Method Signature string GenerateGuid(bool includeDashes) Examples using Snipster.Library.Helpers; public class Example { public static void Main() { // Generate a new GUID without dashes string guid = StringFx.GenerateGuid(includeDashes: false); Console.WriteLine(guid); // Example: \"a3f1b9e88a6b41dca3d4b1f26dfc9f42\" Console.WriteLine(guid.Length); // 32 // Generate a new GUID with standard dash separators string guid = StringFx.GenerateGuid(includeDashes: true); Console.WriteLine(guid); // Example: \"a3f1b9e8-8a6b-41dc-a3d4-b1f26dfc9f42\" Console.WriteLine(guid.Length); // 36 } }"
  },
  "docs/help-fx/string-fx/generateuniqueusername.html": {
    "href": "docs/help-fx/string-fx/generateuniqueusername.html",
    "title": "GenerateUniqueUsername() | Snipster",
    "summary": "Description Generates a unique username using the first and last name. Appends a number if the base username is already taken. Method Signature string GenerateUniqueUsername(string firstName, string lastName, Func<string, bool> isUsernameTaken) Examples using Snipster.Library.Helpers; public class Example { public static void Main() { // Generate a username based on first and last name string firstName = \"John\"; string lastName = \"Doe\"; // Example function that checks if a username is already taken Func<string, bool> isUsernameTaken = username => { // Simulate that \"johndoe\" and \"johndoe1\" already exist return username == \"johndoe\" || username == \"johndoe1\"; }; string uniqueUsername = StringFx.GenerateUniqueUsername(firstName, lastName, isUsernameTaken); Console.WriteLine(uniqueUsername); // Output: \"johndoe2\" } }"
  },
  "docs/introduction.html": {
    "href": "docs/introduction.html",
    "title": "Introduction | Snipster",
    "summary": "Introduction to Snipster Snipster is a lightweight helper library for .NET developers that makes everyday coding tasks faster and cleaner. It includes a rich collection of methods for validation, object handling, cloning, file operations, and networking — all organized in a simple, easy-to-use structure. You don’t need to remember where things are — everything in Snipster is well organized and ready to use. Why Snipster? Every .NET project has those small but repetitive coding tasks — checking nulls, validating data, copying objects, or handling files. Instead of writing the same helper code again and again, Snipster gives you a clean, reusable toolkit that just works. It’s designed to save time, reduce boilerplate, and keep your codebase consistent and readable. What Makes It Different Simple & intuitive – No setup, no confusion — just import and start using. Well structured – Helpers are grouped logically by category. Fast & reliable – Optimized for performance and real-world use. Reusable everywhere – Works with any .NET project — API, web, or desktop. Documented & tested – Clear docs and examples for every feature. For Developers, By Developers Snipster is built for developers who want clean, maintainable, and practical code. It’s the result of real-world experience — combining the most useful utilities you need every day in one package. Explore the docs and examples to see how Snipster can make your .NET development smoother and more enjoyable."
  },
  "docs/unit-of-work/example.html": {
    "href": "docs/unit-of-work/example.html",
    "title": "Unit of Work | Snipster",
    "summary": "Examples Once registered, you can inject IUnitOfWork anywhere in your application — for example, in a controller or service class. using Snipster.Library.UOW; namespace Test.Services { /// <summary> /// Demonstrates usage of <see cref=\"IUnitOfWork\"/> within a service class. /// </summary> public class TestService { private readonly IUnitOfWork _unitOfWork; /// <summary> /// Initializes a new instance of the <see cref=\"TestService\"/> class. /// </summary> /// <param name=\"unitOfWork\">The unit of work used to access repositories.</param> public TestService(IUnitOfWork unitOfWork) { _unitOfWork = unitOfWork ?? throw new ArgumentNullException(nameof(unitOfWork)); } /// <summary> /// Retrieves all <see cref=\"TestObject\"/> entities from the database. /// </summary> /// <returns> /// A collection of <see cref=\"TestObject\"/> instances. /// </returns> public async Task<IEnumerable<TestObject>> GetAllAsync() { return await _unitOfWork.Repository<TestObject>().GetAllAsync(); } } }"
  },
  "docs/unit-of-work/setup.html": {
    "href": "docs/unit-of-work/setup.html",
    "title": "Setup | Snipster",
    "summary": "Registering the Unit of Work (UoW) in Dependency Injection To make the UnitOfWork and its dependent services (such as GenericRepository<T> and DbContext) available throughout the application, register them in the Dependency Injection (DI) container — typically inside Program.cs (or Startup.cs for older ASP.NET Core projects). 1. Add Required Interfaces and Implementations to DI Container // Program.cs using Microsoft.EntityFrameworkCore; using Snipster.Library.Repository; using Snipster.Library.UOW; var builder = WebApplication.CreateBuilder(args); // Register your DbContext builder.Services.AddDbContext<AppDbContext>(options => options.UseSqlServer(builder.Configuration.GetConnectionString(\"DefaultConnection\"))); // Register the generic repository builder.Services.AddScoped(typeof(IGenericRepository<>), typeof(GenericRepository<>)); // Register the unit of work services.AddScoped<IUnitOfWork, UnitOfWork>(); var app = builder.Build(); app.Run();"
  },
  "docs/val-ex/collection-val-ex/hasduplicates.html": {
    "href": "docs/val-ex/collection-val-ex/hasduplicates.html",
    "title": "HasDuplicates<T>() | Snipster",
    "summary": "Description Returns true if the collection contains any duplicates. Method Signature bool HasDuplicates<T>(this IEnumerable<T> source) Examples using Snipster.Library.Extensions.Validations; public class Example { public static void Main() { // Example 1: Collection with duplicates var fruits = new List<string> { \"apple\", \"banana\", \"apple\", \"orange\" }; bool result1 = fruits.HasDuplicates(); // True - \"apple\" appears more than once // Example 2: Collection without duplicates var numbers = new List<int> { 1, 2, 3, 4, 5 }; bool result2 = numbers.HasDuplicates(); // False - all elements are unique // Example 3: Empty or null collection var emptyList = new List<string>(); bool result3 = emptyList.HasDuplicates(); // False - no duplicates in an empty collection } }"
  },
  "docs/val-ex/collection-val-ex/isnullorempty.html": {
    "href": "docs/val-ex/collection-val-ex/isnullorempty.html",
    "title": "IsNullOrEmpty<T>() | Snipster",
    "summary": "Description Returns true if the collection is null or has no elements. Method Signature bool IsNullOrEmpty<T>(this IEnumerable<T> source) Examples using Snipster.Library.Extensions.Validations; public class Example { public static void Main() { // Example 1: Empty list var emptyList = new List<string>(); bool result1 = emptyList.IsNullOrEmpty(); // True - because the list is empty // Example 2: Null collection List<int>? nullList = null; bool result2 = nullList.IsNullOrEmpty(); // True - because the collection is null // Example 3: Non-empty list var numbers = new List<int> { 1, 2, 3 }; bool result3 = numbers.IsNullOrEmpty(); // False - because the list contains items } }"
  },
  "docs/val-ex/creditcard-val-ex/isvalidcreditcard.html": {
    "href": "docs/val-ex/creditcard-val-ex/isvalidcreditcard.html",
    "title": "IsValidCreditCard() | Snipster",
    "summary": "Description Validates if a given string is a valid credit card number using Luhn algorithm. Supports major card types such as Visa, MasterCard, American Express, and Discover. Method Signature bool IsValidCreditCard(this string input) Examples using Snipster.Library.Extensions.Validations; public class Example { public static void Main() { // Example 1: Valid credit card numbers var validCards = new List<string> { \"4111111111111111\", // Visa \"4111 1111 1111 1111\", // Visa with spaces \"5500000000000004\", // MasterCard \"340000000000009\", // American Express \"6011000000000012\" // Discover }; var validResults = validCards.Select(x => x.IsValidCreditCard()).ToList(); Console.WriteLine(validResults.All(x => x)); // True (all valid) // Example 2: Invalid credit card numbers var invalidCards = new List<string> { \"1234567890123456\", // Invalid Luhn checksum \"4111111111111\", // Too short \"41111111111111111111\", // Too long \"abcd efgh ijkl mnop\", // Non-numeric \"\", // Empty string \" \", // Whitespace only \"4111-1111-1111-1111\" // Dashes instead of digits/spaces }; foreach (var card in invalidCards) { bool result = card.IsValidCreditCard(); Console.WriteLine($\"{card} -> {result}\"); // False for all cases above } } }"
  },
  "docs/val-ex/datetime-val-ex/isfuture.html": {
    "href": "docs/val-ex/datetime-val-ex/isfuture.html",
    "title": "IsFuture() | Snipster",
    "summary": "Description Returns true if the date is in the future. Method Signature bool IsFuture(this DateTime date) Examples using Snipster.Library.Extensions.Validations; public class Example { public static void Main() { var futureDate = DateTime.Now.AddDays(5); var pastDate = DateTime.Now.AddDays(-5); Console.WriteLine(futureDate.IsFuture()); // True Console.WriteLine(pastDate.IsFuture()); // False } }"
  },
  "docs/val-ex/datetime-val-ex/ispast.html": {
    "href": "docs/val-ex/datetime-val-ex/ispast.html",
    "title": "IsPast() | Snipster",
    "summary": "Description Returns true if the date is in the past. Method Signature bool IsPast(this DateTime date) Examples using Snipster.Library.Extensions.Validations; public class Example { public static void Main() { var pastDate = DateTime.Now.AddDays(-10); var currentDate = DateTime.Now; Console.WriteLine(pastDate.IsPast()); // True Console.WriteLine(currentDate.IsPast()); // False } }"
  },
  "docs/val-ex/datetime-val-ex/istoday.html": {
    "href": "docs/val-ex/datetime-val-ex/istoday.html",
    "title": "IsToday() | Snipster",
    "summary": "Description Returns true if the date is today. Method Signature bool IsToday(this DateTime date) Examples using Snipster.Library.Extensions.Validations; public class Example { public static void Main() { var today = DateTime.Today; var yesterday = DateTime.Today.AddDays(-1); var tomorrow = DateTime.Today.AddDays(1); Console.WriteLine(today.IsToday()); // True Console.WriteLine(yesterday.IsToday()); // False Console.WriteLine(tomorrow.IsToday()); // False } }"
  },
  "docs/val-ex/datetime-val-ex/isvaliddate.html": {
    "href": "docs/val-ex/datetime-val-ex/isvaliddate.html",
    "title": "IsValidDate() | Snipster",
    "summary": "Description Validates if a given string is a valid date in a specific format. Method Signature bool IsValidDate(this string input, string format = \"yyyy-MM-dd\") Examples using Snipster.Library.Extensions.Validations; public class Example { public static void Main() { string validDate = \"2023-10-01\"; string invalidDate = \"2023-13-01\"; // Invalid month Console.WriteLine(validDate.IsValidDate()); // True Console.WriteLine(invalidDate.IsValidDate()); // False } } Note IsToday, IsFuture, and IsPast typically rely on DateTime.Now or DateTime.Today for comparison. IsWeekend and IsWeekday use the DayOfWeek property to determine whether a date falls on a weekday or weekend. IsValidDate is useful for validating date input before parsing or storing it in a database."
  },
  "docs/val-ex/datetime-val-ex/isweekday.html": {
    "href": "docs/val-ex/datetime-val-ex/isweekday.html",
    "title": "IsWeekday() | Snipster",
    "summary": "Description Returns true if the date is a weekday (Monday–Friday). Method Signature bool IsWeekday(this DateTime date) Examples using Snipster.Library.Extensions.Validations; public class Example { public static void Main() { var monday = new DateTime(2023, 10, 9); var saturday = new DateTime(2023, 10, 7); Console.WriteLine(monday.IsWeekday()); // True Console.WriteLine(saturday.IsWeekday()); // False } }"
  },
  "docs/val-ex/datetime-val-ex/isweekend.html": {
    "href": "docs/val-ex/datetime-val-ex/isweekend.html",
    "title": "IsWeekend() | Snipster",
    "summary": "Description Returns true if the date is a weekend (Saturday or Sunday). Method Signature bool IsWeekend(this DateTime date) Examples using Snipster.Library.Extensions.Validations; public class Example { public static void Main() { var saturday = new DateTime(2023, 10, 7); var sunday = new DateTime(2023, 10, 8); var monday = new DateTime(2023, 10, 9); Console.WriteLine(saturday.IsWeekend()); // True Console.WriteLine(sunday.IsWeekend()); // True Console.WriteLine(monday.IsWeekend()); // False } }"
  },
  "docs/val-ex/json-val-ex/isvalidjson.html": {
    "href": "docs/val-ex/json-val-ex/isvalidjson.html",
    "title": "IsValidJson() | Snipster",
    "summary": "Description Validates if a string is a valid JSON format. Supports validation for objects ({}), arrays ([]), and nested structures. Method Signature bool IsValidJson(this string json) Examples using Snipster.Library.Extensions.Validations; public class Example { public static void Main() { // Example 1: Valid JSON object string validJson = @\"{\"\"name\"\":\"\"John\"\", \"\"age\"\":30, \"\"city\"\":\"\"New York\"\"}\"; Console.WriteLine(validJson.IsValidJson()); // True // Example 2: Invalid JSON (missing quotes around keys) string invalidJson = @\"{name:\"\"John\"\", age:30, city:\"\"New York\"\"}\"; Console.WriteLine(invalidJson.IsValidJson()); // False // Example 3: JSON array string jsonArray = @\"[\"\"apple\"\", \"\"banana\"\", \"\"cherry\"\"]\"; Console.WriteLine(jsonArray.IsValidJson()); // True // Example 4: Nested JSON object with array string nestedJson = @\"{\"\"name\"\":\"\"John\"\", \"\"age\"\":30, \"\"cars\"\": [\"\"Ford\"\", \"\"BMW\"\", \"\"Fiat\"\"]}\"; Console.WriteLine(nestedJson.IsValidJson()); // True } }"
  },
  "docs/val-ex/network-val-ex/isvalidipv4.html": {
    "href": "docs/val-ex/network-val-ex/isvalidipv4.html",
    "title": "IsValidIPv4() | Snipster",
    "summary": "Description Validates if a given string is a valid IPv4 address, where each segment (x) is an integer between 0 and 255. Method Signature bool IsValidIPv4(this string input) Examples using Snipster.Library.Extensions.Validations; public class Example { public static void Main() { string validIPv4 = \"192.168.1.1\"; string invalidIPv4 = \"999.999.999.999\"; Console.WriteLine(validIPv4.IsValidIPv4()); // True Console.WriteLine(invalidIPv4.IsValidIPv4()); // False } }"
  },
  "docs/val-ex/network-val-ex/isvalidipv6.html": {
    "href": "docs/val-ex/network-val-ex/isvalidipv6.html",
    "title": "IsValidIPv6() | Snipster",
    "summary": "Description Validates if a given string is a valid IPv6 address. Method Signature bool IsValidIPv6(this string input) Examples using Snipster.Library.Extensions.Validations; public class Example { public static void Main() { string validIPv6 = \"2001:0db8:85a3:0000:0000:8a2e:0370:7334\"; string invalidIPv6 = \"2001:0db8:85a3:0000:0000:8a2e:0370:zzzz\"; Console.WriteLine(validIPv6.IsValidIPv6()); // True Console.WriteLine(invalidIPv6.IsValidIPv6()); // False } }"
  },
  "docs/val-ex/network-val-ex/isvalidwebaddress.html": {
    "href": "docs/val-ex/network-val-ex/isvalidwebaddress.html",
    "title": "IsValidWebAddress() | Snipster",
    "summary": "Description Validates if a given string is a valid HTTP or HTTPS web address (URL). Method Signature bool IsValidWebAddress(this string input) Examples using Snipster.Library.Extensions.Validations; public class Example { public static void Main() { string validWebAddress = \"https://www.example.com\"; string invalidWebAddress = \"ftp://www.example.com\"; Console.WriteLine(validWebAddress.IsValidWebAddress()); // True Console.WriteLine(invalidWebAddress.IsValidWebAddress()); // False } }"
  },
  "docs/val-ex/object-val-ex/hasproperty.html": {
    "href": "docs/val-ex/object-val-ex/hasproperty.html",
    "title": "HasProperty() | Snipster",
    "summary": "Description Checks whether the given object has a property with the specified name. Method Signature bool HasProperty(this object obj, string propertyName) Examples using Snipster.Library.Extensions.Validations; public class Example { public static void Main() { // Person object var person = new Person { Name = \"John\", Age = 30, IsActive = true }; // Property exists bool hasName = person.HasProperty(\"Name\"); // True // Case-sensitive: \"name\" does not match \"Name\" bool hasNameLower = person.HasProperty(\"name\"); // False // Property does not exist bool hasEmail = person.HasProperty(\"Email\"); // False // Throws ArgumentNullException Person? nullPerson = null; bool invalidCheck = nullPerson!.HasProperty(\"Name\"); // Exception // Throws ArgumentException (null or empty property name) person.HasProperty(null!); // Exception person.HasProperty(\"\"); // Exception } }"
  },
  "docs/val-ex/object-val-ex/isdefaultvalue.html": {
    "href": "docs/val-ex/object-val-ex/isdefaultvalue.html",
    "title": "IsDefaultValue<T>() | Snipster",
    "summary": "Description Determines whether the specified object is equal to its type's default value. Method Signature bool IsDefaultValue<T>(this T obj) Examples using Snipster.Library.Extensions.Validations; public class Example { public static void Main() { // True (null reference) string? name = null; bool isDefault1 = name.IsDefaultValue(); // True (default int) int age = 0; bool isDefault2 = age.IsDefaultValue(); // False (non-default) int age2 = 25; bool isDefault3 = age2.IsDefaultValue(); // True int? nullableNum = null; bool isDefault4 = nullableNum.IsDefaultValue(); // True (default DateTime) DateTime date = default; bool isDefault5 = date.IsDefaultValue(); // False (non-default struct) DateTime now = DateTime.Now; bool isDefault6 = now.IsDefaultValue(); } }"
  },
  "docs/val-ex/security-val-ex/isstrongpassword.html": {
    "href": "docs/val-ex/security-val-ex/isstrongpassword.html",
    "title": "IsStrongPassword() | Snipster",
    "summary": "Description Validates if a password meets basic rules. Typically checks for a minimum length, at least one uppercase letter, one lowercase letter, one digit, and one special character. Method Signature bool IsStrongPassword(this string input, int minLength = 8) Examples using Snipster.Library.Extensions.Validations; public class Example { public static void Main() { string password1 = \"StrongP@ss1\"; bool result1 = password1.IsStrongPassword(); // True string password2 = \"weak\"; bool result2 = password2.IsStrongPassword(); // False } }"
  },
  "docs/val-ex/security-val-ex/isvalidemail.html": {
    "href": "docs/val-ex/security-val-ex/isvalidemail.html",
    "title": "IsValidEmail() | Snipster",
    "summary": "Description Validates string type email address. Checks for proper structure (username, domain, and top-level domain). Method Signature bool IsValidEmail(this string email) Examples using Snipster.Library.Extensions.Validations; public class Example { public static void Main() { string email1 = \"test@example.com\"; bool result1 = email1.IsValidEmail(); // True string email2 = \"invalid-email\"; bool result2 = email2.IsValidEmail(); // False } }"
  },
  "docs/val-ex/string-val-ex/isalphabetic.html": {
    "href": "docs/val-ex/string-val-ex/isalphabetic.html",
    "title": "IsAlphabetic() | Snipster",
    "summary": "Description Validates that a string contains only letters (no digits or symbols). Method Signature bool IsAlphabetic(this string input) Examples using Snipster.Library.Extensions.Validations; public class Example { public static void Main() { \"Hello\".IsAlphabetic(); // True \"Hello123\".IsAlphabetic(); // False } }"
  },
  "docs/val-ex/string-val-ex/isalphanumeric.html": {
    "href": "docs/val-ex/string-val-ex/isalphanumeric.html",
    "title": "IsAlphanumeric() | Snipster",
    "summary": "Description Validates that a string contains only letters or numbers. Determines whether a string contains only alphabetic and numeric characters (A–Z, a–z, 0–9). Method Signature bool IsAlphanumeric(this string input) Examples using Snipster.Library.Extensions.Validations; public class Example { public static void Main() { \"Hello123\".IsAlphanumeric(); // True \"Hello@123\".IsAlphanumeric(); // False } }"
  },
  "docs/val-ex/string-val-ex/iscontainsignorecase.html": {
    "href": "docs/val-ex/string-val-ex/iscontainsignorecase.html",
    "title": "IsContainsIgnoreCase() | Snipster",
    "summary": "Description Checks if the string contains another string with case-insensitive comparison. Method Signature bool IsContainsIgnoreCase(this string source, string toCheck) Examples using Snipster.Library.Extensions.Validations; public class Example { public static void Main() { string text = \"Hello World\"; text.IsContainsIgnoreCase(\"world\"); // True text.IsContainsIgnoreCase(\"planet\"); // False } }"
  },
  "docs/val-ex/string-val-ex/isnumeric.html": {
    "href": "docs/val-ex/string-val-ex/isnumeric.html",
    "title": "IsNumeric() | Snipster",
    "summary": "Description Validates that a string contains only digits. Determines whether a given string contains only numeric characters (0–9). Method Signature bool IsNumeric(this string input) Examples using Snipster.Library.Extensions.Validations; public class Example { public static void Main() { \"123456\".IsNumeric(); // True \"123abc\".IsNumeric(); // False } }"
  },
  "docs/val-ex/string-val-ex/isvalidinternationalphone.html": {
    "href": "docs/val-ex/string-val-ex/isvalidinternationalphone.html",
    "title": "IsValidInternationalPhone() | Snipster",
    "summary": "Description Checks if the string is a valid international phone number (starts with + and contains 10–15 digits). Method Signature bool IsValidInternationalPhone(this string input) Examples using Snipster.Library.Extensions.Validations; public class Example { public static void Main() { \"+941234567890\".IsValidInternationalPhone(); // True \"12345\".IsValidInternationalPhone(); // False } }"
  },
  "docs/val-ex/string-val-ex/isvalidsrilankanphone.html": {
    "href": "docs/val-ex/string-val-ex/isvalidsrilankanphone.html",
    "title": "IsValidSriLankanPhone() | Snipster",
    "summary": "Description Validates whether the string is a valid Sri Lankan phone number (starting with 07, 10 digits). Method Signature bool IsValidSriLankanPhone(this string input) Examples using Snipster.Library.Extensions.Validations; public class Example { public static void Main() { \"0712345678\".IsValidSriLankanPhone(); // True \"123456\".IsValidSriLankanPhone(); // False } }"
  },
  "index.html": {
    "href": "index.html",
    "title": "Quick Start | Snipster",
    "summary": "Quick Start Snipster is a lightweight, open-source .NET utility library packed with extension and helper methods for everyday development tasks including validation, formatting, JSON handling, caching, and repository patterns. Installation Add Snipster to your .NET project using the CLI: dotnet add package Snipster Or install via the NuGet Package Manager: Install-Package Snipster Inside Snipster Category Description Validation Extensions Extensions for validating strings, dates, JSON, collections, and security inputs. Extensions String, DateTime, JSON, Collection, and Security extensions for common tasks. Helpers Utility classes for JSON, File, Excel, Network, Object and Security operations. Repository Pattern Generic repository interface with async CRUD support for EF Core. Unit of Work Centralized transaction and repository management. Caching Service In-memory cache with configurable duration and async refresh. Dependency Injection Setup Easily register services in your application: using Snipster.Library.Repository; using Snipster.Library.UOW; using Snipster.Library.Cache; services.AddScoped(typeof(IGenericRepository<>), typeof(GenericRepository<>)); services.AddScoped<IUnitOfWork, UnitOfWork>(); services.AddSingleton<ICacheService, CacheService>(); Why Use Snipster? Simplifies repetitive coding tasks. Fully compatible with .NET Standard 2.0 and .NET 6+. Clean and consistent naming conventions. Works across web, API, and console projects. 100% Open Source under MIT License. NuGet Package: Snipster on NuGet dotnet add package Snipster Contributing Pull requests, suggestions, and feedback are welcome! Feel free to fork and improve or extend the utility set for the .NET community. See the Contributing Guidelines for more info. Maintainers This project is maintained by: Darshana Wijesinghe License This project is licensed under the MIT License."
  }
}